{
  "address": "0x97D522f3a1739505e1d0B787A2A6caD4730e937f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_trailAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "granularity",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "_ethUsdPriceFeed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_wethPair",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "checkUpkeepNeeded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tslThreshold",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeLimitBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeTSL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC20Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC20TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthUsdPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getExactPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGranularity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStablecoinAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStablecoinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTSLThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrailAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTwapPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_uniswapPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSlippageProtection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateTSLThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e1e2fa8cc6d5f78f220e6225ed997d1b68ff67cb84d29882a4a7f32653b2932",
  "receipt": {
    "to": null,
    "from": "0x2cb509BE01144aF14FCF944957c401C14c6dF722",
    "contractAddress": "0x97D522f3a1739505e1d0B787A2A6caD4730e937f",
    "transactionIndex": 8,
    "gasUsed": "1420102",
    "logsBloom": "0x
    "blockHash": "0xd513d4559e783a7e1146ce531ef149262d385f877310badf9f4fb02a7108723b",
    "transactionHash": "0x1e1e2fa8cc6d5f78f220e6225ed997d1b68ff67cb84d29882a4a7f32653b2932",
    "logs": [],
    "blockNumber": 124805897,
    "cumulativeGasUsed": "2830996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eF8DfBF3F6904e48581Ce9Bf5a454af38c6aCD2",
    "0x2cb509BE01144aF14FCF944957c401C14c6dF722",
    "0x4200000000000000000000000000000000000042",
    "0x4200000000000000000000000000000000000006",
    "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
    "0x68F5C0A2DE713a54991E01858Fd27a3832401849",
    "0x9Af728C794f68E457f8ffBF763155622Da66dd62",
    "10",
    "1",
    "3000",
    "0xb7B9A39CC63f856b90B364911CC324dC46aC1770",
    "true"
  ],
  "numDeployments": 6,
  "solcInputHash": "d06e0ae395f7132ffc8ecdde7947b9bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trailAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_ethUsdPriceFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_wethPair\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"checkUpkeepNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tslThreshold\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeTSL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getExactPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGranularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablecoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablecoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTSLThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrailAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTwapPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_uniswapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSlippageProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"updateTSLThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeepNeeded()\":{\"returns\":{\"_0\":\"A tuple of four values: a boolean indicating if limit buy should be triggered, a boolean indicating if tsl should be triggered, a boolean indicating if the threshold should be updated, and the new threshold value.\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the ERC20 token to deposit.\",\"tslThreshold\":\"The initial trailing stop loss threshold as a percentage.\"}},\"executeTSL()\":{\"details\":\"only callable by the manager contract. Non-reentrant.\"},\"getExactPrice(address)\":{\"details\":\"gets price at the current block timestamp of asset in reference to its paired asset\",\"returns\":{\"_0\":\"The latest price of the ERC20 token in reference to its paired asset.\"}},\"getTwapPrice()\":{\"details\":\"Uses the Uniswap Oracle to get the latest price using TWAP (time-weighted average price) data for the past 5 minutes. Uses Chainlink's price feed to fetch eth price\",\"returns\":{\"_0\":\"The latest price of the ERC20 token in stablecoins.\"}},\"toggleSlippageProtection()\":{\"details\":\"Can only be called by the contract owner.\"},\"updateTSLThreshold(uint256)\":{\"details\":\"This function is private and should be called only by performUpkeep.\",\"params\":{\"newThreshold\":\"The new threshold value to set.\"}},\"withdraw(address)\":{\"details\":\"Allows withdrawal of either ERC20 tokens or stablecoins\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeepNeeded()\":{\"notice\":\"Checks if upkeep is needed based on TSL conditions.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposits a specified amount of the ERC20 token into the contract.\"},\"executeTSL()\":{\"notice\":\"Swaps asset into stable token on Uniswap and sets the contract into the buying state.\"},\"getExactPrice(address)\":{\"notice\":\"Gets the exact price of the ERC20 token in its paired asset. Used for calculating swap parameters.\"},\"getTwapPrice()\":{\"notice\":\"Gets the latest price of the ERC20 token in USD. Only used for triggering upkeep actions\"},\"toggleSlippageProtection()\":{\"notice\":\"Activates slippage protection for token swaps.\"},\"updateTSLThreshold(uint256)\":{\"notice\":\"Updates the trailing stop loss threshold.\"},\"withdraw(address)\":{\"notice\":\"Withdraws the user's funds from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrailMix.sol\":\"TrailMix\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IERC20withDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FORK OF OPPENZEPPLIN IERC20 CONTRACT WITH THE ADDED DECIMALS FUNCTION\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20withDecimals {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n     \\r\\n}\",\"keccak256\":\"0xaf9879407dd3f6eb01c8a44aa7181a6eb7806681943158ef33d767889cc04394\",\"license\":\"MIT\"},\"contracts/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\r\\n\\tstruct ExactInputSingleParams {\\r\\n\\t\\taddress tokenIn;\\r\\n\\t\\taddress tokenOut;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t\\tuint160 sqrtPriceLimitX96;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n\\t/// @return amountOut The amount of the received token\\r\\n\\tfunction exactInputSingle(\\r\\n\\t\\tExactInputSingleParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n\\r\\n\\tstruct ExactInputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n\\t/// @return amountOut The amount of the received token\\r\\n\\tfunction exactInput(\\r\\n\\t\\tExactInputParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n\\r\\n\\tstruct ExactOutputSingleParams {\\r\\n\\t\\taddress tokenIn;\\r\\n\\t\\taddress tokenOut;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountOut;\\r\\n\\t\\tuint256 amountInMaximum;\\r\\n\\t\\tuint160 sqrtPriceLimitX96;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n\\t/// that may remain in the router after the swap.\\r\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n\\t/// @return amountIn The amount of the input token\\r\\n\\tfunction exactOutputSingle(\\r\\n\\t\\tExactOutputSingleParams calldata params\\r\\n\\t) external payable returns (uint256 amountIn);\\r\\n\\r\\n\\tstruct ExactOutputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountOut;\\r\\n\\t\\tuint256 amountInMaximum;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n\\t/// that may remain in the router after the swap.\\r\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n\\t/// @return amountIn The amount of the input token\\r\\n\\tfunction exactOutput(\\r\\n\\t\\tExactOutputParams calldata params\\r\\n\\t) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\",\"keccak256\":\"0x17f6d1b003f295222e9e302d8e2a075194ddece67f4dfc0d4d56124417149abc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IUniswapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface IUniswapOracle {\\r\\n    function estimateAmountOut(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        uint128 amountIn,\\r\\n        uint32 secondsAgo\\r\\n    ) external view returns (uint amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x5017001026dd46165966a19ca1f9fa3e2d3c9380dcaef6a967b64405600a32cb\",\"license\":\"MIT\"},\"contracts/TrailMix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport { ISwapRouter } from \\\"./ISwapRouter.sol\\\";\\nimport { IERC20withDecimals } from \\\"./IERC20withDecimals.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// import {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IUniswapOracle } from \\\"./IUniswapOracle.sol\\\";\\n\\nerror InvalidAmount(); // Error for when the deposit amount is not positive\\nerror TransferFailed(); // Error for when the token transfer fails\\nerror InvalidToken(); // Error for when the token address is invalid\\nerror StrategyNotActive();\\n\\n//events are emitted in the manager contract\\ncontract TrailMix is ReentrancyGuard {\\n\\taddress private immutable i_manager; //address of the manager contract\\n\\taddress private immutable i_creator; // address of the creator of the contract\\n\\n\\taddress private s_erc20Token;\\n\\taddress private s_stablecoin;\\n\\n\\tISwapRouter private s_uniswapRouter;\\n\\taddress public immutable s_uniswapPool;\\n\\tIUniswapOracle private s_uniswapOracle; // TWAP oracle for Uniswap V3\\n\\n\\tuint256 private immutable s_trailAmount; // Amount to trail by as a %\\n\\tuint256 private s_tslThreshold; // User's TSL threshold\\n\\tuint256 private s_erc20Balance;\\n\\tuint256 private s_stablecoinBalance; // User's ERC20 token balance\\n\\tuint256 private s_granularity; //  % price increase to trigger an update\\n\\tbool private slippageProtection; // Indicates if slippage protection is enabled\\n\\tuint24 private s_poolFee;\\n\\n\\t//USED FOR PROFIT TRACKING\\n\\tuint256 private s_depositValue; // Value of the deposit in USD\\n\\tuint8 private s_stablecoinDecimals; //number of decimals the stablecoin has\\n\\tuint8 private s_erc20TokenDecimals;\\n\\n\\tAggregatorV3Interface private s_ethUsdPriceFeed;\\n\\tbool private s_wethPair; //indicates if the pair is against WETH or USD\\n\\t// if against weth then we will use the eth price feed to calculate the price of the asset in usd\\n\\n\\tuint256 private s_limitBuyPrice;\\n\\tuint256 private s_limitDelay; // how long the before the limit order will be placed\\n\\n\\t//stores current state of contract\\n\\tenum ContractState {\\n\\t\\tUninitialized,\\n\\t\\tTrailingStop,\\n\\t\\tLimitBuy,\\n\\t\\tInactive\\n\\t}\\n\\tContractState private state;\\n\\n\\tconstructor(\\n\\t\\taddress _manager,\\n\\t\\taddress _creator,\\n\\t\\taddress _erc20Token,\\n\\t\\taddress _stablecoin,\\n\\t\\taddress _uniswapRouter,\\n\\t\\taddress _uniswapPool,\\n\\t\\taddress _uniswapOracle,\\n\\t\\tuint256 _trailAmount,\\n\\t\\tuint256 granularity,\\n\\t\\tuint24 _poolFee,\\n\\t\\taddress _ethUsdPriceFeed,\\n\\t\\tbool _wethPair\\n\\t) {\\n\\t\\ti_manager = _manager;\\n\\t\\ti_creator = _creator;\\n\\n\\t\\ts_erc20Token = _erc20Token;\\n\\t\\ts_stablecoin = _stablecoin;\\n\\n\\t\\ts_uniswapRouter = ISwapRouter(_uniswapRouter);\\n\\t\\ts_uniswapOracle = IUniswapOracle(_uniswapOracle);\\n\\t\\ts_uniswapPool = _uniswapPool;\\n\\n\\t\\ts_trailAmount = _trailAmount;\\n\\t\\tslippageProtection = true;\\n\\t\\ts_granularity = granularity;\\n\\t\\ts_poolFee = _poolFee;\\n\\t\\tstate = ContractState.Uninitialized;\\n\\t\\ts_stablecoinDecimals = IERC20withDecimals(_stablecoin).decimals();\\n\\t\\ts_erc20TokenDecimals = IERC20withDecimals(_erc20Token).decimals();\\n\\t\\ts_ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);\\n\\n\\t\\ts_wethPair = _wethPair;\\n\\t}\\n\\n\\tmodifier onlyManager() {\\n\\t\\trequire(msg.sender == i_manager, \\\"only callable by manager contract\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Deposits a specified amount of the ERC20 token into the contract.\\n\\t * @param amount The amount of the ERC20 token to deposit.\\n\\t * @param tslThreshold The initial trailing stop loss threshold as a percentage.\\n\\t */\\n\\tfunction deposit(uint256 amount, uint256 tslThreshold) external {\\n\\t\\tif (amount <= 0) {\\n\\t\\t\\trevert InvalidAmount();\\n\\t\\t}\\n\\t\\tif (state == ContractState.Inactive) {\\n\\t\\t\\trevert StrategyNotActive();\\n\\t\\t}\\n\\n\\t\\tbool transferSuccess = IERC20withDecimals(s_erc20Token).transferFrom(\\n\\t\\t\\t// i_manager,\\n\\t\\t\\tmsg.sender, //for testing purposes\\n\\t\\t\\taddress(this),\\n\\t\\t\\tamount\\n\\t\\t);\\n\\t\\tif (!transferSuccess) {\\n\\t\\t\\trevert TransferFailed();\\n\\t\\t}\\n\\n\\t\\ts_erc20Balance += amount;\\n\\n\\t\\tif (state == ContractState.Uninitialized) {\\n\\t\\t\\t// If TSL is not active, set the threshold and activate TSL\\n\\t\\t\\ts_tslThreshold = (tslThreshold * (100 - s_trailAmount)) / 100;\\n\\n\\t\\t\\tstate = ContractState.TrailingStop;\\n\\t\\t}\\n\\n\\t\\t//store usd value at time of deposit\\n\\t\\ts_depositValue += getTwapPrice() * amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws the user's funds from the contract.\\n\\t * @dev Allows withdrawal of either ERC20 tokens or stablecoins\\n\\t */\\n\\tfunction withdraw(address token) external {\\n\\t\\tuint256 withdrawalAmount;\\n\\n\\t\\tif (token == s_stablecoin) {\\n\\t\\t\\t// Logic to handle stablecoin withdrawal\\n\\t\\t\\twithdrawalAmount = s_stablecoinBalance;\\n\\t\\t\\tif (withdrawalAmount <= 0) {\\n\\t\\t\\t\\trevert InvalidAmount();\\n\\t\\t\\t}\\n\\t\\t\\ts_stablecoinBalance = 0;\\n\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\ts_stablecoin,\\n\\t\\t\\t\\ti_creator, // sends funds to the contract creator\\n\\t\\t\\t\\twithdrawalAmount\\n\\t\\t\\t);\\n\\t\\t\\t//deactiveate TSL\\n\\t\\t\\tstate = ContractState.Inactive;\\n\\t\\t} else if (token == s_erc20Token) {\\n\\t\\t\\t// If TSL is active, user withdraws their ERC20 tokens\\n\\t\\t\\twithdrawalAmount = s_erc20Balance;\\n\\t\\t\\tif (withdrawalAmount <= 0) {\\n\\t\\t\\t\\trevert InvalidAmount();\\n\\t\\t\\t}\\n\\t\\t\\ts_erc20Balance = 0;\\n\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\ts_erc20Token,\\n\\t\\t\\t\\ti_creator,\\n\\t\\t\\t\\twithdrawalAmount\\n\\t\\t\\t);\\n\\t\\t\\t//deactivate tsl\\n\\t\\t\\tstate = ContractState.Inactive;\\n\\t\\t} else {\\n\\t\\t\\trevert InvalidToken();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if upkeep is needed based on TSL conditions.\\n\\t * @return A tuple of four values: a boolean indicating if limit buy should be triggered, a boolean indicating if tsl should be triggered, a boolean indicating if the threshold should be updated, and the new threshold value.\\n\\t */\\n\\tfunction checkUpkeepNeeded()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool, bool, bool, uint256)\\n\\t{\\n\\t\\t// If contract is in trailing stop state then check if it needs to be updated or executed\\n\\t\\tif (state == ContractState.TrailingStop) {\\n\\t\\t\\tuint256 currentPrice = getTwapPrice();\\n\\t\\t\\tuint256 exactPrice = getExactPrice(s_erc20Token);\\n\\n\\t\\t\\tbool triggerSell = false;\\n\\t\\t\\tbool updateThreshold = false;\\n\\t\\t\\tuint256 newThreshold = 0;\\n\\n\\t\\t\\t// Calculate 10% price range bounds\\n\\t\\t\\tuint256 lowerBound = (currentPrice * 90) / 100;\\n\\t\\t\\tuint256 upperBound = (currentPrice * 110) / 100;\\n\\t\\t\\t//calculates the old all time high price based on the threshold\\n\\t\\t\\tuint256 oldCurrentPrice = (s_tslThreshold * 100) /\\n\\t\\t\\t\\t(100 - s_trailAmount);\\n\\n\\t\\t\\t//determines the price that is granularity% higher than the old stored price\\n\\t\\t\\tuint256 minPriceForUpdate = (oldCurrentPrice *\\n\\t\\t\\t\\t(100 + s_granularity)) / 100;\\n\\t\\t\\t//if new price is less than the current threshold then trigger TSL\\n\\t\\t\\tif (exactPrice >= lowerBound && exactPrice <= upperBound) {\\n\\t\\t\\t\\tif (currentPrice < s_tslThreshold) {\\n\\t\\t\\t\\t\\t//trigger TSL\\n\\t\\t\\t\\t\\ttriggerSell = true;\\n\\t\\t\\t\\t} else if (currentPrice > minPriceForUpdate) {\\n\\t\\t\\t\\t\\tupdateThreshold = true;\\n\\t\\t\\t\\t\\tnewThreshold = (currentPrice * (100 - s_trailAmount)) / 100;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn (false, triggerSell, updateThreshold, newThreshold);\\n\\t\\t} else if (state == ContractState.LimitBuy) {\\n\\t\\t\\tuint256 currentPrice = getTwapPrice();\\n\\t\\t\\tbool limitTrigger = false;\\n\\t\\t\\tif (\\n\\t\\t\\t\\tcurrentPrice < s_limitBuyPrice && block.timestamp > s_limitDelay\\n\\t\\t\\t) {\\n\\t\\t\\t\\tlimitTrigger = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn (limitTrigger, false, false, 0);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the trailing stop loss threshold.\\n\\t * @dev This function is private and should be called only by performUpkeep.\\n\\t * @param newThreshold The new threshold value to set.\\n\\t */\\n\\tfunction updateTSLThreshold(uint256 newThreshold) external {\\n\\t\\ts_tslThreshold = newThreshold;\\n\\t}\\n\\n\\tfunction getEthUsdPrice() public view returns (uint256) {\\n\\t\\t(\\n\\t\\t\\t,\\n\\t\\t\\t/* uint80 roundID */ int256 price /* uint startedAt */ /* uint timeStamp */ /* uint80 answeredInRound */,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\n\\t\\t) = s_ethUsdPriceFeed.latestRoundData();\\n\\t\\tuint8 decimals = s_ethUsdPriceFeed.decimals();\\n\\t\\treturn uint256(price) * (10 ** (18 - decimals)); // standardizes price to 18 decimals\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the latest price of the ERC20 token in USD. Only used for triggering upkeep actions\\n\\t * @dev Uses the Uniswap Oracle to get the latest price using TWAP (time-weighted average price) data for the past 5 minutes.\\n\\t * Uses Chainlink's price feed to fetch eth price\\n\\t * @return The latest price of the ERC20 token in stablecoins.\\n\\t */\\n\\tfunction getTwapPrice() public view returns (uint256) {\\n\\t\\tuint256 amountOut = s_uniswapOracle.estimateAmountOut(\\n\\t\\t\\ts_uniswapPool,\\n\\t\\t\\ts_erc20Token,\\n\\t\\t\\t1e18, // number of decimals for erc20 token\\n\\t\\t\\t300 // 5 minutes of price data (300 seconds)\\n\\t\\t);\\n\\t\\tif (s_wethPair) {\\n\\t\\t\\tuint256 ethPrice = getEthUsdPrice();\\n\\t\\t\\treturn (amountOut * ethPrice) / 10 ** 18;\\n\\t\\t}\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the exact price of the ERC20 token in its paired asset. Used for calculating swap parameters.\\n\\t * @dev gets price at the current block timestamp of asset in reference to its paired asset\\n\\t * @return The latest price of the ERC20 token in reference to its paired asset.\\n\\t */\\n\\tfunction getExactPrice(address token) public view returns (uint256) {\\n\\t\\tuint256 amountOut = s_uniswapOracle.estimateAmountOut(\\n\\t\\t\\ts_uniswapPool,\\n\\t\\t\\ttoken,\\n\\t\\t\\t1e18, // number of decimals for erc20 token\\n\\t\\t\\t1\\n\\t\\t);\\n\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swaps the user's ERC20 tokens for stablecoins on Uniswap.\\n\\t * @dev only callable by the manager contract. Non-reentrant.\\n\\t * @param amount The amount of the ERC20 token to swap.\\n\\t */\\n\\tfunction swapOnUniswap(\\n\\t\\taddress tokenIn,\\n\\t\\taddress tokenOut,\\n\\t\\tuint256 amount\\n\\t) private returns (uint256) {\\n\\t\\t//swap ERC20 tokens for stablecoin on uniswap\\n\\t\\t//need to approve uniswap to spend ERC20 tokens\\n\\n\\t\\t//gets the most up to date price to calculate slippage\\n\\t\\tuint256 currentPrice = getExactPrice(tokenIn);\\n\\t\\tuint256 minAmountOut;\\n\\n\\t\\tuint256 feeBps = s_poolFee; //take into account the pool fees\\n\\n\\t\\tif (slippageProtection) {\\n\\t\\t\\tminAmountOut =\\n\\t\\t\\t\\t(amount * currentPrice * (feeBps + 500)) /\\n\\t\\t\\t\\t(100000 * 1e18); //99.5% of the current price (including pool fee)\\n\\t\\t} else {\\n\\t\\t\\tminAmountOut = 0;\\n\\t\\t}\\n\\n\\t\\tIERC20withDecimals(tokenIn).approve(\\n\\t\\t\\taddress(s_uniswapRouter),\\n\\t\\t\\tamount\\n\\t\\t);\\n\\n\\t\\tISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n\\t\\t\\t.ExactInputSingleParams({\\n\\t\\t\\t\\ttokenIn: tokenIn,\\n\\t\\t\\t\\ttokenOut: tokenOut,\\n\\t\\t\\t\\tfee: s_poolFee,\\n\\t\\t\\t\\trecipient: address(this),\\n\\t\\t\\t\\t// deadline: block.timestamp, NOT NEEDED FOR ROUTER ON BASE\\n\\t\\t\\t\\tamountIn: amount,\\n\\t\\t\\t\\tamountOutMinimum: minAmountOut,\\n\\t\\t\\t\\tsqrtPriceLimitX96: 0\\n\\t\\t\\t});\\n\\t\\tuint256 amountOut = s_uniswapRouter.exactInputSingle(params);\\n\\n\\t\\t//TRACK BALANCE OF STABLECOIN AND BASE TOKEN IN CONTRACT\\n\\t\\tif (tokenIn == s_stablecoin) {\\n\\t\\t\\ts_erc20Balance += amountOut;\\n\\t\\t\\ts_stablecoinBalance = 0;\\n\\t\\t} else {\\n\\t\\t\\ts_stablecoinBalance += amountOut;\\n\\t\\t\\ts_erc20Balance =0;\\n\\t\\t}\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swaps asset into stable token on Uniswap and sets the contract into the buying state.\\n\\t * @dev only callable by the manager contract. Non-reentrant.\\n\\t */\\n\\tfunction executeTSL() external {\\n\\t\\trequire(\\n\\t\\t\\tstate == ContractState.TrailingStop,\\n\\t\\t\\t\\\"Not in TrailingStop state\\\"\\n\\t\\t);\\n\\t\\tuint256 amountOut = swapOnUniswap(\\n\\t\\t\\ts_erc20Token,\\n\\t\\t\\ts_stablecoin,\\n\\t\\t\\ts_erc20Balance\\n\\t\\t);\\n\\n\\t\\ts_limitBuyPrice = getExactPrice(s_erc20Token); // price that the erc20 token was sold at\\n\\n\\t\\ts_limitDelay = block.timestamp + 1 days; //set the limit order to be placed in 1 day\\n\\t\\tstate = ContractState.LimitBuy;\\n\\t}\\n\\n\\tfunction executeLimitBuy() external {\\n\\t\\trequire(state == ContractState.LimitBuy, \\\"Not in LimitBuy state\\\");\\n\\t\\tuint256 amountOut = swapOnUniswap(\\n\\t\\t\\ts_stablecoin,\\n\\t\\t\\ts_erc20Token,\\n\\t\\t\\ts_stablecoinBalance\\n\\t\\t);\\n\\n\\t\\tuint256 currentPrice = getTwapPrice();\\n\\t\\ts_tslThreshold = (currentPrice * (100 - s_trailAmount)) / 100;\\n\\n\\t\\t//reset limit order parameters\\n\\t\\ts_limitBuyPrice = 0;\\n\\n\\t\\tstate = ContractState.TrailingStop;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Activates slippage protection for token swaps.\\n\\t * @dev Can only be called by the contract owner.\\n\\t */\\n\\tfunction toggleSlippageProtection() public onlyManager {\\n\\t\\tslippageProtection = !slippageProtection;\\n\\t}\\n\\n\\t// View functions for contract interaction and frontend integration\\n\\tfunction getERC20Balance() public view returns (uint256) {\\n\\t\\treturn s_erc20Balance;\\n\\t}\\n\\n\\tfunction getStablecoinBalance() public view returns (uint256) {\\n\\t\\treturn s_stablecoinBalance;\\n\\t}\\n\\n\\tfunction getTSLThreshold() public view returns (uint256) {\\n\\t\\treturn s_tslThreshold;\\n\\t}\\n\\n\\t// View function to get ERC20 token address\\n\\tfunction getERC20TokenAddress() public view returns (address) {\\n\\t\\treturn s_erc20Token;\\n\\t}\\n\\n\\t// View function to get stablecoin address\\n\\tfunction getStablecoinAddress() public view returns (address) {\\n\\t\\treturn s_stablecoin;\\n\\t}\\n\\n\\t// View function to get Uniswap router address\\n\\tfunction getUniswapRouterAddress() public view returns (address) {\\n\\t\\treturn address(s_uniswapRouter);\\n\\t}\\n\\n\\tfunction getTrailAmount() public view returns (uint256) {\\n\\t\\treturn s_trailAmount;\\n\\t}\\n\\n\\tfunction getManager() public view returns (address) {\\n\\t\\treturn i_manager;\\n\\t}\\n\\n\\tfunction getCreator() public view returns (address) {\\n\\t\\treturn i_creator;\\n\\t}\\n\\n\\tfunction getGranularity() public view returns (uint256) {\\n\\t\\treturn s_granularity;\\n\\t}\\n\\n\\tfunction getUniswapPool() public view returns (address) {\\n\\t\\treturn s_uniswapPool;\\n\\t}\\n\\n\\tfunction getDepositValue() public view returns (uint256) {\\n\\t\\treturn s_depositValue;\\n\\t}\\n\\n\\tfunction getState() public view returns (string memory) {\\n\\t\\tif (state == ContractState.Uninitialized) return \\\"Uninitialized\\\";\\n\\t\\tif (state == ContractState.LimitBuy) return \\\"LimitBuy\\\";\\n\\t\\tif (state == ContractState.TrailingStop) return \\\"TrailingStop\\\";\\n\\t\\tif (state == ContractState.Inactive) return \\\"Inactive\\\";\\n\\t\\treturn \\\"Unknown\\\"; // fallback in case of an unexpected state\\n\\t}\\n}\\n\",\"keccak256\":\"0x5bd9668a4aac83f5016d96581e7c76d49e698029970be17c15fa1363e1f97899\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620018e9380380620018e9833981016040819052620000359162000240565b600160008181556001600160a01b038e81166080528d811660a05282546001600160a01b03199081168e83161784556002805482168e84161790556003805482168d8416179055600480549091168a8316179055891660c05260e087905260098054600888905563ffffffff191661010062ffffff8816021783179055600e80549192909160ff191690830217905550886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012a91906200032c565b600b60006101000a81548160ff021916908360ff160217905550896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000183573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a991906200032c565b600b8054921515600160b01b0260ff60b01b196001600160a01b03909516620100000262010000600160b01b031960ff949094166101000293909316610100600160b01b0319909416939093179190911792909216179055506200035898505050505050505050565b80516001600160a01b03811681146200022a57600080fd5b919050565b805180151581146200022a57600080fd5b6000806000806000806000806000806000806101808d8f0312156200026457600080fd5b6200026f8d62000212565b9b506200027f60208e0162000212565b9a506200028f60408e0162000212565b99506200029f60608e0162000212565b9850620002af60808e0162000212565b9750620002bf60a08e0162000212565b9650620002cf60c08e0162000212565b955060e08d015194506101008d015193506101208d015162ffffff81168114620002f857600080fd5b9250620003096101408e0162000212565b91506200031a6101608e016200022f565b90509295989b509295989b509295989b565b6000602082840312156200033f57600080fd5b815160ff811681146200035157600080fd5b9392505050565b60805160a05160c05160e051611511620003d86000396000818161029b015281816106e401528181610ae401528181610cd30152610d770152600081816101d70152818161025d015281816103850152610b8d01526000818161018501528181610585015261060a0152600081816102d2015261092801526115116000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806398d07356116100c3578063d538df491161007c578063d538df49146102f6578063def74f91146102fe578063e2bbb15814610306578063eee2bfa014610319578063f0b9468414610321578063f9a19e541461035157600080fd5b806398d0735614610281578063a0a8045e14610289578063c3736fe614610291578063c612a80814610299578063d39ac0cb146102bf578063d5009584146102d057600080fd5b8063624aa0fd11610115578063624aa0fd1461021657806368e6ea75146102275780637bef4f541461022f57806391b517601461024057806394e49dbc14610248578063983733f01461025b57600080fd5b806307415ae01461015d5780630ee2cb10146101835780631865c57d146101bd5780631966b608146101d25780634096c91c146101f957806351cff8d914610201575b600080fd5b61017061016b36600461115f565b610359565b6040519081526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161017a565b6101c5610402565b60405161017a91906111ac565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b600854610170565b61021461020f36600461115f565b610533565b005b6001546001600160a01b03166101a5565b600754610170565b6002546001600160a01b03166101a5565b610214610648565b6102146102563660046111df565b600555565b7f00000000000000000000000000000000000000000000000000000000000000006101a5565b600a54610170565b610170610736565b600654610170565b7f0000000000000000000000000000000000000000000000000000000000000000610170565b6003546001600160a01b03166101a5565b7f00000000000000000000000000000000000000000000000000000000000000006101a5565b610214610858565b61021461091d565b6102146103143660046111f8565b6109b3565b610170610b5c565b610329610c49565b604080519415158552921515602085015290151591830191909152606082015260800161017a565b600554610170565b600480546040516317f271b760e31b815260009283926001600160a01b03169163bf938db8916103ba917f0000000000000000000000000000000000000000000000000000000000000000918891670de0b6b3a7640000916001910161121a565b602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb919061125a565b9392505050565b60606000600e5460ff16600381111561041d5761041d611273565b0361044a575060408051808201909152600d81526c155b9a5b9a5d1a585b1a5e9959609a1b602082015290565b6002600e5460ff16600381111561046357610463611273565b0361048b57506040805180820190915260088152674c696d697442757960c01b602082015290565b6001600e5460ff1660038111156104a4576104a4611273565b036104d0575060408051808201909152600c81526b0547261696c696e6753746f760a41b602082015290565b6003600e5460ff1660038111156104e9576104e9611273565b036105115750604080518082019091526008815267496e61637469766560c01b602082015290565b506040805180820190915260078152662ab735b737bbb760c91b602082015290565b6002546000906001600160a01b03908116908316036105bb57506007548061056e5760405163162908e360e11b815260040160405180910390fd5b60006007556002546105aa906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610e2c565b5050600e805460ff19166003179055565b6001546001600160a01b039081169083160361062f5750600654806105f35760405163162908e360e11b815260040160405180910390fd5b60006006556001546105aa906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610e2c565b60405163c1ab6dc160e01b815260040160405180910390fd5b6002600e5460ff16600381111561066157610661611273565b146106ab5760405162461bcd60e51b81526020600482015260156024820152744e6f7420696e204c696d697442757920737461746560581b60448201526064015b60405180910390fd5b6002546001546007546000926106cf926001600160a01b0391821692911690610f2c565b905060006106db610b5c565b905060646107097f00000000000000000000000000000000000000000000000000000000000000008261129f565b61071390836112b8565b61071d91906112cf565b60055550506000600c55600e805460ff19166001179055565b600080600b60029054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b0919061130b565b5050509150506000600b60029054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f919061135b565b905061083c81601261137e565b61084790600a61147b565b61085190836112b8565b9250505090565b6001600e5460ff16600381111561087157610871611273565b146108be5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420696e20547261696c696e6753746f702073746174650000000000000060448201526064016106a2565b6001546002546006546000926108e2926001600160a01b0391821692911690610f2c565b6001549091506108fa906001600160a01b0316610359565b600c5561090a426201518061148a565b600d5550600e805460ff19166002179055565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461099f5760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792063616c6c61626c65206279206d616e6167657220636f6e747261636044820152601d60fa1b60648201526084016106a2565b6009805460ff19811660ff90911615179055565b600082116109d45760405163162908e360e11b815260040160405180910390fd5b6003600e5460ff1660038111156109ed576109ed611273565b03610a0b57604051631b92e95360e31b815260040160405180910390fd5b6001546040516323b872dd60e01b8152336004820152306024820152604481018490526000916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a87919061149d565b905080610aa7576040516312171d8360e31b815260040160405180910390fd5b8260066000828254610ab9919061148a565b9091555060009050600e5460ff166003811115610ad857610ad8611273565b03610b2e576064610b097f00000000000000000000000000000000000000000000000000000000000000008261129f565b610b1390846112b8565b610b1d91906112cf565b600555600e805460ff191660011790555b82610b37610b5c565b610b4191906112b8565b600a6000828254610b52919061148a565b9091555050505050565b600480546001546040516317f271b760e31b815260009384936001600160a01b039081169363bf938db893610bc5937f00000000000000000000000000000000000000000000000000000000000000009390921691670de0b6b3a76400009161012c910161121a565b602060405180830381865afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c06919061125a565b600b54909150600160b01b900460ff1615610c44576000610c25610736565b9050670de0b6b3a7640000610c3a82846112b8565b61085191906112cf565b919050565b60008080806001600e5460ff166003811115610c6757610c67611273565b03610dcc576000610c76610b5c565b600154909150600090610c91906001600160a01b0316610359565b905060008080806064610ca587605a6112b8565b610caf91906112cf565b905060006064610cc088606e6112b8565b610cca91906112cf565b90506000610cf97f0000000000000000000000000000000000000000000000000000000000000000606461129f565b600554610d079060646112b8565b610d1191906112cf565b9050600060646008546064610d26919061148a565b610d3090846112b8565b610d3a91906112cf565b9050838810158015610d4c5750828811155b15610db357600554891015610d645760019650610db3565b80891115610db357600195506064610d9c7f00000000000000000000000000000000000000000000000000000000000000008261129f565b610da6908b6112b8565b610db091906112cf565b94505b5060009b50949950929750909550610e26945050505050565b6002600e5460ff166003811115610de557610de5611273565b03610e26576000610df4610b5c565b90506000600c5482108015610e0a5750600d5442115b15610e13575060015b945060009350839250829150610e269050565b90919293565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610e8891906114bf565b6000604051808303816000865af19150503d8060008114610ec5576040519150601f19603f3d011682016040523d82523d6000602084013e610eca565b606091505b5091509150818015610ef4575080511580610ef4575080806020019051810190610ef4919061149d565b610f255760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016106a2565b5050505050565b600080610f3885610359565b60095490915060009062ffffff6101008204169060ff1615610f905769152d02c7e14af6800000610f6b826101f461148a565b610f7585886112b8565b610f7f91906112b8565b610f8991906112cf565b9150610f95565b600091505b60035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529088169063095ea7b3906044016020604051808303816000875af1158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c919061149d565b506040805160e0810182526001600160a01b03898116825288811660208301908152600954610100900462ffffff9081168486019081523060608601908152608086018c815260a087018a8152600060c089018181526003549a516304e45aaf60e01b81528a518a166004820152975189166024890152945190951660448701529151861660648601525160848501525160a484015251831660c48301529293909116906304e45aaf9060e4016020604051808303816000875af11580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc919061125a565b6002549091506001600160a01b03908116908a1603611136578060066000828254611127919061148a565b90915550506000600755611153565b8060076000828254611148919061148a565b909155505060006006555b98975050505050505050565b60006020828403121561117157600080fd5b81356001600160a01b03811681146103fb57600080fd5b60005b838110156111a357818101518382015260200161118b565b50506000910152565b60208152600082518060208401526111cb816040850160208701611188565b601f01601f19169190910160400192915050565b6000602082840312156111f157600080fd5b5035919050565b6000806040838503121561120b57600080fd5b50508035926020909101359150565b6001600160a01b0394851681529290931660208301526fffffffffffffffffffffffffffffffff16604082015263ffffffff909116606082015260800190565b60006020828403121561126c57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156112b2576112b2611289565b92915050565b80820281158282048414176112b2576112b2611289565b6000826112ec57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114610c4457600080fd5b600080600080600060a0868803121561132357600080fd5b61132c866112f1565b945060208601519350604086015192506060860151915061134f608087016112f1565b90509295509295909350565b60006020828403121561136d57600080fd5b815160ff811681146103fb57600080fd5b60ff82811682821603908111156112b2576112b2611289565b600181815b808511156113d25781600019048211156113b8576113b8611289565b808516156113c557918102915b93841c939080029061139c565b509250929050565b6000826113e9575060016112b2565b816113f6575060006112b2565b816001811461140c576002811461141657611432565b60019150506112b2565b60ff84111561142757611427611289565b50506001821b6112b2565b5060208310610133831016604e8410600b8410161715611455575081810a6112b2565b61145f8383611397565b806000190482111561147357611473611289565b029392505050565b60006103fb60ff8416836113da565b808201808211156112b2576112b2611289565b6000602082840312156114af57600080fd5b815180151581146103fb57600080fd5b600082516114d1818460208701611188565b919091019291505056fea2646970667358221220307ead0bdb30d9e6dcaedb35e0173e2fe5ad836ed2ab2601da7510abe19ad9d164736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeepNeeded()": {
        "returns": {
          "_0": "A tuple of four values: a boolean indicating if limit buy should be triggered, a boolean indicating if tsl should be triggered, a boolean indicating if the threshold should be updated, and the new threshold value."
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "The amount of the ERC20 token to deposit.",
          "tslThreshold": "The initial trailing stop loss threshold as a percentage."
        }
      },
      "executeTSL()": {
        "details": "only callable by the manager contract. Non-reentrant."
      },
      "getExactPrice(address)": {
        "details": "gets price at the current block timestamp of asset in reference to its paired asset",
        "returns": {
          "_0": "The latest price of the ERC20 token in reference to its paired asset."
        }
      },
      "getTwapPrice()": {
        "details": "Uses the Uniswap Oracle to get the latest price using TWAP (time-weighted average price) data for the past 5 minutes. Uses Chainlink's price feed to fetch eth price",
        "returns": {
          "_0": "The latest price of the ERC20 token in stablecoins."
        }
      },
      "toggleSlippageProtection()": {
        "details": "Can only be called by the contract owner."
      },
      "updateTSLThreshold(uint256)": {
        "details": "This function is private and should be called only by performUpkeep.",
        "params": {
          "newThreshold": "The new threshold value to set."
        }
      },
      "withdraw(address)": {
        "details": "Allows withdrawal of either ERC20 tokens or stablecoins"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeepNeeded()": {
        "notice": "Checks if upkeep is needed based on TSL conditions."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposits a specified amount of the ERC20 token into the contract."
      },
      "executeTSL()": {
        "notice": "Swaps asset into stable token on Uniswap and sets the contract into the buying state."
      },
      "getExactPrice(address)": {
        "notice": "Gets the exact price of the ERC20 token in its paired asset. Used for calculating swap parameters."
      },
      "getTwapPrice()": {
        "notice": "Gets the latest price of the ERC20 token in USD. Only used for triggering upkeep actions"
      },
      "toggleSlippageProtection()": {
        "notice": "Activates slippage protection for token swaps."
      },
      "updateTSLThreshold(uint256)": {
        "notice": "Updates the trailing stop loss threshold."
      },
      "withdraw(address)": {
        "notice": "Withdraws the user's funds from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 716,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_erc20Token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 718,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_stablecoin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 721,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_uniswapRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapRouter)537"
      },
      {
        "astId": 726,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_uniswapOracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapOracle)686"
      },
      {
        "astId": 730,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_tslThreshold",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 732,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_erc20Balance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 734,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_stablecoinBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 736,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_granularity",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 738,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "slippageProtection",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 740,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_poolFee",
        "offset": 1,
        "slot": "9",
        "type": "t_uint24"
      },
      {
        "astId": 742,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_depositValue",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 744,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_stablecoinDecimals",
        "offset": 0,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 746,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_erc20TokenDecimals",
        "offset": 1,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 749,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_ethUsdPriceFeed",
        "offset": 2,
        "slot": "11",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 751,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_wethPair",
        "offset": 22,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 753,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_limitBuyPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 755,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "s_limitDelay",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 763,
        "contract": "contracts/TrailMix.sol:TrailMix",
        "label": "state",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(ContractState)760"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)537": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapOracle)686": {
        "encoding": "inplace",
        "label": "contract IUniswapOracle",
        "numberOfBytes": "20"
      },
      "t_enum(ContractState)760": {
        "encoding": "inplace",
        "label": "enum TrailMix.ContractState",
        "numberOfBytes": "1"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}