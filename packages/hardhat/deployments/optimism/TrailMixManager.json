{
  "address": "0x1399CB24A143A724948b59Bf6813a9bd2ec66890",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotContractOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trailAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trailAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trailAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_trailAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_granularity",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "_ethUsdPriceFeed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_wethPair",
          "type": "bool"
        }
      ],
      "name": "deployTrailMix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tslThreshold",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isActiveStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "buy",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "sell",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "updateThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setGelatoExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "toggleSlippageProtection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23070666719a01bcacd0d7a1791a5b78638d84e939b6d61464b164f2a64da209",
  "receipt": {
    "to": null,
    "from": "0x2cb509BE01144aF14FCF944957c401C14c6dF722",
    "contractAddress": "0x1399CB24A143A724948b59Bf6813a9bd2ec66890",
    "transactionIndex": 5,
    "gasUsed": "3101471",
    "logsBloom": "0x
    "blockHash": "0x6e92a3dace824499b18212804b68de80a365dd68782eaf227a511ea292a29fcf",
    "transactionHash": "0x23070666719a01bcacd0d7a1791a5b78638d84e939b6d61464b164f2a64da209",
    "logs": [],
    "blockNumber": 124979266,
    "cumulativeGasUsed": "4408361",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f266ffa22ca75fe429c1fe3461e65c30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trailAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trailAmount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trailAmount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trailAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_granularity\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_ethUsdPriceFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_wethPair\",\"type\":\"bool\"}],\"name\":\"deployTrailMix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tslThreshold\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isActiveStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setGelatoExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"toggleSlippageProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checker()\":{\"details\":\"Part of the Gelato automation\",\"returns\":{\"canExec\":\"Boolean flag indicating if upkeep is needed.\",\"execPayload\":\"Encoded data on what action to perform during upkeep.\"}},\"performUpkeep(address,bool,bool,bool,uint256)\":{\"details\":\"Part of the gelato automation.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checker()\":{\"notice\":\"Checks if upkeep is needed based on TSL conditions.COMPUTED OFF-CHAIN\"},\"performUpkeep(address,bool,bool,bool,uint256)\":{\"notice\":\"Performs the upkeep of updating the stop loss threshold or triggering a sell.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrailMixManager.sol\":\"TrailMixManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IERC20withDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FORK OF OPPENZEPPLIN IERC20 CONTRACT WITH THE ADDED DECIMALS FUNCTION\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20withDecimals {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n     \\r\\n}\",\"keccak256\":\"0xaf9879407dd3f6eb01c8a44aa7181a6eb7806681943158ef33d767889cc04394\",\"license\":\"MIT\"},\"contracts/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\r\\n\\tstruct ExactInputSingleParams {\\r\\n\\t\\taddress tokenIn;\\r\\n\\t\\taddress tokenOut;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t\\tuint160 sqrtPriceLimitX96;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n\\t/// @return amountOut The amount of the received token\\r\\n\\tfunction exactInputSingle(\\r\\n\\t\\tExactInputSingleParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n\\r\\n\\tstruct ExactInputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n\\t/// @return amountOut The amount of the received token\\r\\n\\tfunction exactInput(\\r\\n\\t\\tExactInputParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n\\r\\n\\tstruct ExactOutputSingleParams {\\r\\n\\t\\taddress tokenIn;\\r\\n\\t\\taddress tokenOut;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountOut;\\r\\n\\t\\tuint256 amountInMaximum;\\r\\n\\t\\tuint160 sqrtPriceLimitX96;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n\\t/// that may remain in the router after the swap.\\r\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n\\t/// @return amountIn The amount of the input token\\r\\n\\tfunction exactOutputSingle(\\r\\n\\t\\tExactOutputSingleParams calldata params\\r\\n\\t) external payable returns (uint256 amountIn);\\r\\n\\r\\n\\tstruct ExactOutputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountOut;\\r\\n\\t\\tuint256 amountInMaximum;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n\\t/// that may remain in the router after the swap.\\r\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n\\t/// @return amountIn The amount of the input token\\r\\n\\tfunction exactOutput(\\r\\n\\t\\tExactOutputParams calldata params\\r\\n\\t) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\",\"keccak256\":\"0x17f6d1b003f295222e9e302d8e2a075194ddece67f4dfc0d4d56124417149abc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ITrailMix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ITrailMix {\\r\\n\\tfunction deposit(uint256 amount, uint256 tslThreshold) external;\\r\\n\\r\\n\\tfunction withdraw(address token) external;\\r\\n\\r\\n\\tfunction checkUpkeepNeeded()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (bool, bool, bool, uint256);\\r\\n\\r\\n\\tfunction updateTSLThreshold(uint256 newThreshold) external;\\r\\n\\r\\n\\tfunction getEthUsdPrice() external view returns (uint256);\\r\\n\\r\\n\\tfunction getTwapPrice() external view returns (uint256);\\r\\n\\r\\n\\tfunction getExactPrice(address token) external view returns (uint256);\\r\\n\\r\\n\\tfunction swapOnUniswap(\\r\\n\\t\\taddress tokenIn,\\r\\n\\t\\taddress tokenOut,\\r\\n\\t\\tuint256 amount\\r\\n\\t) external returns (uint256);\\r\\n\\r\\n\\tfunction executeTSL() external;\\r\\n\\r\\n\\tfunction executeLimitBuy() external;\\r\\n\\r\\n\\tfunction toggleSlippageProtection() external;\\r\\n\\r\\n\\tfunction getERC20Balance() external view returns (uint256);\\r\\n\\r\\n\\tfunction getStablecoinBalance() external view returns (uint256);\\r\\n\\r\\n\\tfunction getTSLThreshold() external view returns (uint256);\\r\\n\\r\\n\\tfunction getERC20TokenAddress() external view returns (address);\\r\\n\\r\\n\\tfunction getStablecoinAddress() external view returns (address);\\r\\n\\r\\n\\tfunction getUniswapRouterAddress() external view returns (address);\\r\\n\\r\\n\\tfunction getTrailAmount() external view returns (uint256);\\r\\n\\r\\n\\tfunction getManager() external view returns (address);\\r\\n\\r\\n\\tfunction getCreator() external view returns (address);\\r\\n\\r\\n\\tfunction getGranularity() external view returns (uint256);\\r\\n\\r\\n\\tfunction getUniswapPool() external view returns (address);\\r\\n\\r\\n\\tfunction getDepositValue() external view returns (uint256);\\r\\n\\r\\n\\tfunction getState() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xc4a32216a975dac1488f792c8747fe48293b38df2dd95b5ede7934016521e1ed\",\"license\":\"MIT\"},\"contracts/IUniswapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface IUniswapOracle {\\r\\n    function estimateAmountOut(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        uint128 amountIn,\\r\\n        uint32 secondsAgo\\r\\n    ) external view returns (uint amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x5017001026dd46165966a19ca1f9fa3e2d3c9380dcaef6a967b64405600a32cb\",\"license\":\"MIT\"},\"contracts/TrailMix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport { ISwapRouter } from \\\"./ISwapRouter.sol\\\";\\nimport { IERC20withDecimals } from \\\"./IERC20withDecimals.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// import {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IUniswapOracle } from \\\"./IUniswapOracle.sol\\\";\\n\\nerror InvalidAmount(); // Error for when the deposit amount is not positive\\nerror TransferFailed(); // Error for when the token transfer fails\\nerror InvalidToken(); // Error for when the token address is invalid\\nerror StrategyNotActive();\\n\\n//events are emitted in the manager contract\\ncontract TrailMix is ReentrancyGuard {\\n\\taddress private immutable i_manager; //address of the manager contract\\n\\taddress private immutable i_creator; // address of the creator of the contract\\n\\n\\taddress private s_erc20Token;\\n\\taddress private s_stablecoin;\\n\\n\\tISwapRouter private s_uniswapRouter;\\n\\taddress public immutable s_uniswapPool;\\n\\tIUniswapOracle private s_uniswapOracle; // TWAP oracle for Uniswap V3\\n\\n\\tuint256 private immutable s_trailAmount; // Amount to trail by as a %\\n\\tuint256 private s_tslThreshold; // User's TSL threshold\\n\\tuint256 private s_erc20Balance;\\n\\tuint256 private s_stablecoinBalance; // User's ERC20 token balance\\n\\tuint256 private s_granularity; //  % price increase to trigger an update\\n\\tbool private slippageProtection; // Indicates if slippage protection is enabled\\n\\tuint24 private s_poolFee;\\n\\n\\t//USED FOR PROFIT TRACKING\\n\\tuint256 private s_depositValue; // Value of the deposit in USD\\n\\tuint8 private s_stablecoinDecimals; //number of decimals the stablecoin has\\n\\tuint8 private s_erc20TokenDecimals;\\n\\n\\tAggregatorV3Interface private s_ethUsdPriceFeed;\\n\\tbool private s_wethPair; //indicates if the pair is against WETH or USD\\n\\t// if against weth then we will use the eth price feed to calculate the price of the asset in usd\\n\\n\\tuint256 private s_limitBuyPrice;\\n\\tuint256 private s_limitDelay; // how long the before the limit order will be placed\\n\\n\\t//stores current state of contract\\n\\tenum ContractState {\\n\\t\\tUninitialized,\\n\\t\\tTrailingStop,\\n\\t\\tLimitBuy,\\n\\t\\tInactive\\n\\t}\\n\\tContractState private state;\\n\\n\\tconstructor(\\n\\t\\taddress _manager,\\n\\t\\taddress _creator,\\n\\t\\taddress _erc20Token,\\n\\t\\taddress _stablecoin,\\n\\t\\taddress _uniswapRouter,\\n\\t\\taddress _uniswapPool,\\n\\t\\taddress _uniswapOracle,\\n\\t\\tuint256 _trailAmount,\\n\\t\\tuint256 granularity,\\n\\t\\tuint24 _poolFee,\\n\\t\\taddress _ethUsdPriceFeed,\\n\\t\\tbool _wethPair\\n\\t) {\\n\\t\\ti_manager = _manager;\\n\\t\\ti_creator = _creator;\\n\\n\\t\\ts_erc20Token = _erc20Token;\\n\\t\\ts_stablecoin = _stablecoin;\\n\\n\\t\\ts_uniswapRouter = ISwapRouter(_uniswapRouter);\\n\\t\\ts_uniswapOracle = IUniswapOracle(_uniswapOracle);\\n\\t\\ts_uniswapPool = _uniswapPool;\\n\\n\\t\\ts_trailAmount = _trailAmount;\\n\\t\\tslippageProtection = true;\\n\\t\\ts_granularity = granularity;\\n\\t\\ts_poolFee = _poolFee;\\n\\t\\tstate = ContractState.Uninitialized;\\n\\t\\ts_stablecoinDecimals = IERC20withDecimals(_stablecoin).decimals();\\n\\t\\ts_erc20TokenDecimals = IERC20withDecimals(_erc20Token).decimals();\\n\\t\\ts_ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);\\n\\n\\t\\ts_wethPair = _wethPair;\\n\\t}\\n\\n\\tmodifier onlyManager() {\\n\\t\\trequire(msg.sender == i_manager, \\\"only callable by manager contract\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Deposits a specified amount of the ERC20 token into the contract.\\n\\t * @param amount The amount of the ERC20 token to deposit.\\n\\t * @param tslThreshold The initial trailing stop loss threshold as a percentage.\\n\\t */\\n\\tfunction deposit(uint256 amount, uint256 tslThreshold) external {\\n\\t\\tif (amount <= 0) {\\n\\t\\t\\trevert InvalidAmount();\\n\\t\\t}\\n\\t\\tif (state == ContractState.Inactive) {\\n\\t\\t\\trevert StrategyNotActive();\\n\\t\\t}\\n\\n\\t\\tbool transferSuccess = IERC20withDecimals(s_erc20Token).transferFrom(\\n\\t\\t\\t// i_manager,\\n\\t\\t\\tmsg.sender, //for testing purposes\\n\\t\\t\\taddress(this),\\n\\t\\t\\tamount\\n\\t\\t);\\n\\t\\tif (!transferSuccess) {\\n\\t\\t\\trevert TransferFailed();\\n\\t\\t}\\n\\n\\t\\ts_erc20Balance += amount;\\n\\n\\t\\tif (state == ContractState.Uninitialized) {\\n\\t\\t\\t// If TSL is not active, set the threshold and activate TSL\\n\\t\\t\\ts_tslThreshold = (tslThreshold * (100 - s_trailAmount)) / 100;\\n\\n\\t\\t\\tstate = ContractState.TrailingStop;\\n\\t\\t}\\n\\n\\t\\t//store usd value at time of deposit\\n\\t\\ts_depositValue += getTwapPrice() * amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws the user's funds from the contract.\\n\\t * @dev Allows withdrawal of either ERC20 tokens or stablecoins\\n\\t */\\n\\tfunction withdraw(address token) external {\\n\\t\\tuint256 withdrawalAmount;\\n\\n\\t\\tif (token == s_stablecoin) {\\n\\t\\t\\t// Logic to handle stablecoin withdrawal\\n\\t\\t\\twithdrawalAmount = s_stablecoinBalance;\\n\\t\\t\\tif (withdrawalAmount <= 0) {\\n\\t\\t\\t\\trevert InvalidAmount();\\n\\t\\t\\t}\\n\\t\\t\\ts_stablecoinBalance = 0;\\n\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\ts_stablecoin,\\n\\t\\t\\t\\ti_creator, // sends funds to the contract creator\\n\\t\\t\\t\\twithdrawalAmount\\n\\t\\t\\t);\\n\\t\\t\\t//deactiveate TSL\\n\\t\\t\\tstate = ContractState.Inactive;\\n\\t\\t} else if (token == s_erc20Token) {\\n\\t\\t\\t// If TSL is active, user withdraws their ERC20 tokens\\n\\t\\t\\twithdrawalAmount = s_erc20Balance;\\n\\t\\t\\tif (withdrawalAmount <= 0) {\\n\\t\\t\\t\\trevert InvalidAmount();\\n\\t\\t\\t}\\n\\t\\t\\ts_erc20Balance = 0;\\n\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\ts_erc20Token,\\n\\t\\t\\t\\ti_creator,\\n\\t\\t\\t\\twithdrawalAmount\\n\\t\\t\\t);\\n\\t\\t\\t//deactivate tsl\\n\\t\\t\\tstate = ContractState.Inactive;\\n\\t\\t} else {\\n\\t\\t\\trevert InvalidToken();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if upkeep is needed based on TSL conditions.\\n\\t * @return A tuple of four values: a boolean indicating if limit buy should be triggered, a boolean indicating if tsl should be triggered, a boolean indicating if the threshold should be updated, and the new threshold value.\\n\\t */\\n\\tfunction checkUpkeepNeeded()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool, bool, bool, uint256)\\n\\t{\\n\\t\\t// If contract is in trailing stop state then check if it needs to be updated or executed\\n\\t\\tif (state == ContractState.TrailingStop) {\\n\\t\\t\\tuint256 currentPrice = getTwapPrice();\\n\\n\\t\\t\\tbool triggerSell = false;\\n\\t\\t\\tbool updateThreshold = false;\\n\\t\\t\\tuint256 newThreshold = 0;\\n\\n\\t\\t\\t//calculates the old all time high price based on the threshold\\n\\t\\t\\tuint256 oldCurrentPrice = (s_tslThreshold * 100) /\\n\\t\\t\\t\\t(100 - s_trailAmount);\\n\\n\\t\\t\\t//determines the price that is granularity% higher than the old stored price\\n\\t\\t\\tuint256 minPriceForUpdate = (oldCurrentPrice *\\n\\t\\t\\t\\t(100 + s_granularity)) / 100;\\n\\t\\t\\t//if new price is less than the current threshold then trigger TSL\\n\\n\\t\\t\\tif (currentPrice < s_tslThreshold) {\\n\\t\\t\\t\\t//trigger TSL\\n\\t\\t\\t\\ttriggerSell = true;\\n\\t\\t\\t} else if (currentPrice > minPriceForUpdate) {\\n\\t\\t\\t\\tupdateThreshold = true;\\n\\t\\t\\t\\tnewThreshold = (currentPrice * (100 - s_trailAmount)) / 100;\\n\\t\\t\\t}\\n\\t\\t\\treturn (false, triggerSell, updateThreshold, newThreshold);\\n\\t\\t\\t\\n\\t\\t} else if (state == ContractState.LimitBuy) {\\n\\t\\t\\tuint256 currentPrice = getTwapPrice();\\n\\t\\t\\tbool limitTrigger = false;\\n\\t\\t\\tif (\\n\\t\\t\\t\\tcurrentPrice < s_limitBuyPrice && block.timestamp > s_limitDelay\\n\\t\\t\\t) {\\n\\t\\t\\t\\tlimitTrigger = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn (limitTrigger, false, false, 0);\\n\\t\\t}\\n\\t\\treturn (false, false, false, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the trailing stop loss threshold.\\n\\t * @dev This function is private and should be called only by performUpkeep.\\n\\t * @param newThreshold The new threshold value to set.\\n\\t */\\n\\tfunction updateTSLThreshold(uint256 newThreshold) external {\\n\\t\\ts_tslThreshold = newThreshold;\\n\\t}\\n\\n\\tfunction getEthUsdPrice() public view returns (uint256) {\\n\\t\\t(\\n\\t\\t\\t,\\n\\t\\t\\t/* uint80 roundID */ int256 price /* uint startedAt */ /* uint timeStamp */ /* uint80 answeredInRound */,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\n\\t\\t) = s_ethUsdPriceFeed.latestRoundData();\\n\\t\\tuint8 decimals = s_ethUsdPriceFeed.decimals();\\n\\t\\treturn uint256(price) * (10 ** (18 - decimals)); // standardizes price to 18 decimals\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the latest price of the ERC20 token in USD. Only used for triggering upkeep actions\\n\\t * @dev Uses the Uniswap Oracle to get the latest price using TWAP (time-weighted average price) data for the past 5 minutes.\\n\\t * Uses Chainlink's price feed to fetch eth price\\n\\t * @return The latest price of the ERC20 token in stablecoins.\\n\\t */\\n\\tfunction getTwapPrice() public view returns (uint256) {\\n\\t\\tuint256 amountOut = s_uniswapOracle.estimateAmountOut(\\n\\t\\t\\ts_uniswapPool,\\n\\t\\t\\ts_erc20Token,\\n\\t\\t\\t1e18, // number of decimals for erc20 token\\n\\t\\t\\t300 // 5 minutes of price data (300 seconds)\\n\\t\\t);\\n\\t\\tif (s_wethPair) {\\n\\t\\t\\tuint256 ethPrice = getEthUsdPrice();\\n\\t\\t\\treturn (amountOut * ethPrice) / 10 ** 18;\\n\\t\\t}\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the exact price of the ERC20 token in its paired asset. Used for calculating swap parameters.\\n\\t * @dev gets price at the current block timestamp of asset in reference to its paired asset\\n\\t * @return The latest price of the ERC20 token in reference to its paired asset.\\n\\t */\\n\\tfunction getExactPrice(address token) public view returns (uint256) {\\n\\t\\tuint256 amountOut = s_uniswapOracle.estimateAmountOut(\\n\\t\\t\\ts_uniswapPool,\\n\\t\\t\\ttoken,\\n\\t\\t\\t1e18, // number of decimals for erc20 token\\n\\t\\t\\t1\\n\\t\\t);\\n\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swaps the user's ERC20 tokens for stablecoins on Uniswap.\\n\\t * @dev only callable by the manager contract. Non-reentrant.\\n\\t * @param amount The amount of the ERC20 token to swap.\\n\\t */\\n\\tfunction swapOnUniswap(\\n\\t\\taddress tokenIn,\\n\\t\\taddress tokenOut,\\n\\t\\tuint256 amount\\n\\t) private returns (uint256) {\\n\\t\\t//swap ERC20 tokens for stablecoin on uniswap\\n\\t\\t//need to approve uniswap to spend ERC20 tokens\\n\\n\\t\\t//gets the most up to date price to calculate slippage\\n\\t\\tuint256 currentPrice = getExactPrice(tokenIn);\\n\\t\\tuint256 minAmountOut;\\n\\n\\t\\tuint256 feeBps = s_poolFee; //take into account the pool fees\\n\\n\\t\\tif (slippageProtection) {\\n\\t\\t\\tminAmountOut =\\n\\t\\t\\t\\t(amount * currentPrice * (feeBps + 500)) /\\n\\t\\t\\t\\t(100000 * 1e18); //99.5% of the current price (including pool fee)\\n\\t\\t} else {\\n\\t\\t\\tminAmountOut = 0;\\n\\t\\t}\\n\\n\\t\\tIERC20withDecimals(tokenIn).approve(address(s_uniswapRouter), amount);\\n\\n\\t\\tISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n\\t\\t\\t.ExactInputSingleParams({\\n\\t\\t\\t\\ttokenIn: tokenIn,\\n\\t\\t\\t\\ttokenOut: tokenOut,\\n\\t\\t\\t\\tfee: s_poolFee,\\n\\t\\t\\t\\trecipient: address(this),\\n\\t\\t\\t\\t// deadline: block.timestamp, NOT NEEDED FOR ROUTER ON BASE\\n\\t\\t\\t\\tamountIn: amount,\\n\\t\\t\\t\\tamountOutMinimum: minAmountOut,\\n\\t\\t\\t\\tsqrtPriceLimitX96: 0\\n\\t\\t\\t});\\n\\t\\tuint256 amountOut = s_uniswapRouter.exactInputSingle(params);\\n\\n\\t\\t//TRACK BALANCE OF STABLECOIN AND BASE TOKEN IN CONTRACT\\n\\t\\tif (tokenIn == s_stablecoin) {\\n\\t\\t\\ts_erc20Balance += amountOut;\\n\\t\\t\\ts_stablecoinBalance = 0;\\n\\t\\t} else {\\n\\t\\t\\ts_stablecoinBalance += amountOut;\\n\\t\\t\\ts_erc20Balance = 0;\\n\\t\\t}\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swaps asset into stable token on Uniswap and sets the contract into the buying state.\\n\\t * @dev only callable by the manager contract. Non-reentrant.\\n\\t */\\n\\tfunction executeTSL() external {\\n\\t\\trequire(\\n\\t\\t\\tstate == ContractState.TrailingStop,\\n\\t\\t\\t\\\"Not in TrailingStop state\\\"\\n\\t\\t);\\n\\t\\tswapOnUniswap(s_erc20Token, s_stablecoin, s_erc20Balance);\\n\\n\\t\\ts_limitBuyPrice = getExactPrice(s_erc20Token); // price that the erc20 token was sold at\\n\\n\\t\\ts_limitDelay = block.timestamp + 1 days; //set the limit order to be placed in 1 day\\n\\t\\tstate = ContractState.LimitBuy;\\n\\t}\\n\\n\\tfunction executeLimitBuy() external {\\n\\t\\trequire(state == ContractState.LimitBuy, \\\"Not in LimitBuy state\\\");\\n\\t\\tswapOnUniswap(s_stablecoin, s_erc20Token, s_stablecoinBalance);\\n\\n\\t\\tuint256 currentPrice = getTwapPrice();\\n\\t\\ts_tslThreshold = (currentPrice * (100 - s_trailAmount)) / 100;\\n\\n\\t\\t//reset limit order parameters\\n\\t\\ts_limitBuyPrice = 0;\\n\\n\\t\\tstate = ContractState.TrailingStop;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Activates slippage protection for token swaps.\\n\\t * @dev Can only be called by the contract owner.\\n\\t */\\n\\tfunction toggleSlippageProtection() public onlyManager {\\n\\t\\tslippageProtection = !slippageProtection;\\n\\t}\\n\\n\\t// View functions for contract interaction and frontend integration\\n\\tfunction getERC20Balance() public view returns (uint256) {\\n\\t\\treturn s_erc20Balance;\\n\\t}\\n\\n\\tfunction getStablecoinBalance() public view returns (uint256) {\\n\\t\\treturn s_stablecoinBalance;\\n\\t}\\n\\n\\tfunction getTSLThreshold() public view returns (uint256) {\\n\\t\\treturn s_tslThreshold;\\n\\t}\\n\\n\\t// View function to get ERC20 token address\\n\\tfunction getERC20TokenAddress() public view returns (address) {\\n\\t\\treturn s_erc20Token;\\n\\t}\\n\\n\\t// View function to get stablecoin address\\n\\tfunction getStablecoinAddress() public view returns (address) {\\n\\t\\treturn s_stablecoin;\\n\\t}\\n\\n\\t// View function to get Uniswap router address\\n\\tfunction getUniswapRouterAddress() public view returns (address) {\\n\\t\\treturn address(s_uniswapRouter);\\n\\t}\\n\\n\\tfunction getTrailAmount() public view returns (uint256) {\\n\\t\\treturn s_trailAmount;\\n\\t}\\n\\n\\tfunction getManager() public view returns (address) {\\n\\t\\treturn i_manager;\\n\\t}\\n\\n\\tfunction getCreator() public view returns (address) {\\n\\t\\treturn i_creator;\\n\\t}\\n\\n\\tfunction getGranularity() public view returns (uint256) {\\n\\t\\treturn s_granularity;\\n\\t}\\n\\n\\tfunction getUniswapPool() public view returns (address) {\\n\\t\\treturn s_uniswapPool;\\n\\t}\\n\\n\\tfunction getDepositValue() public view returns (uint256) {\\n\\t\\treturn s_depositValue;\\n\\t}\\n\\n\\tfunction getState() public view returns (string memory) {\\n\\t\\tif (state == ContractState.Uninitialized) return \\\"Uninitialized\\\";\\n\\t\\tif (state == ContractState.LimitBuy) return \\\"LimitBuy\\\";\\n\\t\\tif (state == ContractState.TrailingStop) return \\\"TrailingStop\\\";\\n\\t\\tif (state == ContractState.Inactive) return \\\"Inactive\\\";\\n\\t\\treturn \\\"Unknown\\\"; // fallback in case of an unexpected state\\n\\t}\\n}\\n\",\"keccak256\":\"0x533dd2bbf88c67f8594d5c56b7d5343ec6c0f413a077838f6c506b4b75322693\",\"license\":\"MIT\"},\"contracts/TrailMixManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// import {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NotContractOwner(); // Error for when the caller is not the contract owner\\r\\n\\r\\nimport { TrailMix } from \\\"./TrailMix.sol\\\"; // Import TrailMix contract\\r\\nimport { ITrailMix } from \\\"./ITrailMix.sol\\\"; // Import ITrailMix interface\\r\\n\\r\\ncontract TrailMixManager is ReentrancyGuard {\\r\\n\\t//array storing all active strategies\\r\\n\\taddress[] public activeStrategies;\\r\\n\\t// mapping to store index of strategy in activeStrategies array\\r\\n\\tmapping(address => uint256) private strategyIndex;\\r\\n\\r\\n\\t//mapping for quick lookup for if a strategy is active\\r\\n\\tmapping(address => bool) public isActiveStrategy;\\r\\n\\r\\n\\t// Mapping from user address to array of deployed TrailMix contract addresses\\r\\n\\tmapping(address => address[]) public userContracts;\\r\\n\\r\\n\\taddress private gelatoExecutor; //only address authorized to call performUpkeep\\r\\n\\r\\n\\taddress private managerDeployer; //address authorized to set gelato executor\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmsg.sender == address(this) ||\\r\\n\\t\\t\\t\\tmsg.sender == address(gelatoExecutor),\\r\\n\\t\\t\\t\\\"Not authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t// Event to emit when a new TrailMix contract is deployed\\r\\n\\tevent ContractDeployed(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\taddress indexed contractAddress,\\r\\n\\t\\taddress indexed token,\\r\\n\\t\\tuint256 trailAmount,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t);\\r\\n\\r\\n\\tevent FundsDeposited(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\tuint256 depositPrice,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 trailAmount\\r\\n\\t);\\r\\n\\tevent FundsWithdrawn(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 trailAmount\\r\\n\\t);\\r\\n\\tevent ThresholdUpdated(\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\tuint256 oldThreshold,\\r\\n\\t\\tuint256 newThreshold,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t);\\r\\n\\tevent SwapExecuted(\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\tuint256 amountIn,\\r\\n\\t\\tuint256 amountOut,\\r\\n\\t\\taddress tokenIn,\\r\\n\\t\\taddress tokenOut,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t);\\r\\n\\r\\n\\tconstructor() {\\r\\n\\t\\tmanagerDeployer = msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\t// Function to deploy a new TrailMix contract\\r\\n\\tfunction deployTrailMix(\\r\\n\\t\\taddress _erc20Token,\\r\\n\\t\\taddress _stablecoin,\\r\\n\\t\\taddress _uniswapRouter,\\r\\n\\t\\taddress _uniswapPool,\\r\\n\\t\\taddress _uniswapOracle,\\r\\n\\t\\tuint256 _trailAmount,\\r\\n\\t\\tuint256 _granularity,\\r\\n\\t\\tuint24 _poolFee,\\r\\n\\t\\taddress _ethUsdPriceFeed,\\r\\n\\t\\tbool _wethPair\\r\\n\\t) public {\\r\\n\\t\\t// Deploy the TrailMix contract\\r\\n\\t\\tTrailMix newTrailMix = new TrailMix(\\r\\n\\t\\t\\taddress(this), // The TrailMixManager contract address\\r\\n\\t\\t\\tmsg.sender, // The user becomes the creator of the TrailMix contract\\r\\n\\t\\t\\t_erc20Token,\\r\\n\\t\\t\\t_stablecoin,\\r\\n\\t\\t\\t_uniswapRouter,\\r\\n\\t\\t\\t_uniswapPool,\\r\\n\\t\\t\\t_uniswapOracle,\\r\\n\\t\\t\\t_trailAmount,\\r\\n\\t\\t\\t_granularity,\\r\\n\\t\\t\\t_poolFee,\\r\\n\\t\\t\\t_ethUsdPriceFeed,\\r\\n\\t\\t\\t_wethPair\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Store the contract address in the userContracts mapping\\r\\n\\t\\tuserContracts[msg.sender].push(address(newTrailMix));\\r\\n\\r\\n\\t\\t// Emit an event for the deployment\\r\\n\\t\\temit ContractDeployed(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taddress(newTrailMix),\\r\\n\\t\\t\\t_erc20Token,\\r\\n\\t\\t\\t_trailAmount,\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deposit(\\r\\n\\t\\taddress _strategy,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint256 _tslThreshold\\r\\n\\t) public {\\r\\n\\t\\tif (ITrailMix(_strategy).getCreator() != msg.sender) {\\r\\n\\t\\t\\trevert NotContractOwner();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Get the ERC20 token address from the TrailMix contract\\r\\n\\t\\taddress erc20TokenAddress = ITrailMix(_strategy).getERC20TokenAddress();\\r\\n\\t\\t//transfer funds from user to the manager contract\\r\\n\\t\\tIERC20(erc20TokenAddress).transferFrom(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\t_amount\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// approve strategy to spend the funds and call deposit\\r\\n\\t\\tIERC20(erc20TokenAddress).approve(_strategy, _amount);\\r\\n\\t\\tITrailMix(_strategy).deposit(_amount, _tslThreshold);\\r\\n\\r\\n\\t\\t//if contract is not in the active array then add it to the active array\\r\\n\\t\\tif (!isActiveStrategy[address(_strategy)]) {\\r\\n\\t\\t\\tactiveStrategies.push(address(_strategy));\\r\\n\\t\\t\\tisActiveStrategy[address(_strategy)] = true;\\r\\n\\t\\t\\tstrategyIndex[address(_strategy)] = activeStrategies.length - 1;\\r\\n\\r\\n\\t\\t\\temit ThresholdUpdated(\\r\\n\\t\\t\\t\\t_strategy,\\r\\n\\t\\t\\t\\tITrailMix(_strategy).getTSLThreshold(),\\r\\n\\t\\t\\t\\tITrailMix(_strategy).getTSLThreshold(),\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Emit an event for the deposit\\r\\n\\t\\temit FundsDeposited(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_strategy,\\r\\n\\t\\t\\tITrailMix(_strategy).getExactPrice(erc20TokenAddress),\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\tITrailMix(_strategy).getERC20TokenAddress(),\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\tITrailMix(_strategy).getTrailAmount()\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw(address _strategy, address _token) public nonReentrant {\\r\\n\\t\\t// Withdraw the user's funds from the TrailMix contract\\r\\n\\t\\tif (ITrailMix(_strategy).getCreator() != msg.sender) {\\r\\n\\t\\t\\trevert NotContractOwner();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\t//fetch amount to be withdrawn\\r\\n\\t\\tif (_token == ITrailMix(_strategy).getERC20TokenAddress()) {\\r\\n\\t\\t\\tamount = ITrailMix(_strategy).getERC20Balance();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tamount = ITrailMix(_strategy).getStablecoinBalance();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tITrailMix(_strategy).withdraw(_token);\\r\\n\\r\\n\\t\\tif (isActiveStrategy[_strategy]) {\\r\\n\\t\\t\\tremoveStrategy(_strategy);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit FundsWithdrawn(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_strategy,\\r\\n\\t\\t\\tamount,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\tITrailMix(_strategy).getTrailAmount()\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction toggleSlippageProtection(address _strategy) public {\\r\\n\\t\\tif (ITrailMix(_strategy).getCreator() != msg.sender) {\\r\\n\\t\\t\\trevert NotContractOwner();\\r\\n\\t\\t}\\r\\n\\t\\tITrailMix(_strategy).toggleSlippageProtection();\\r\\n\\t}\\r\\n\\r\\n\\t// Remove a strategy\\r\\n\\tfunction removeStrategy(address strategy) private {\\r\\n\\t\\trequire(strategy != address(0), \\\"Invalid address\\\");\\r\\n\\r\\n\\t\\tisActiveStrategy[strategy] = false;\\r\\n\\r\\n\\t\\t// Move the last element into the place to delete\\r\\n\\t\\tuint256 index = strategyIndex[strategy];\\r\\n\\t\\taddress lastStrategy = activeStrategies[activeStrategies.length - 1];\\r\\n\\t\\tactiveStrategies[index] = lastStrategy;\\r\\n\\t\\tstrategyIndex[lastStrategy] = index;\\r\\n\\t\\tactiveStrategies.pop();\\r\\n\\r\\n\\t\\t// Clean up\\r\\n\\t\\tdelete strategyIndex[strategy];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if upkeep is needed based on TSL conditions.COMPUTED OFF-CHAIN\\r\\n\\t * @dev Part of the Gelato automation\\r\\n\\t * @return canExec Boolean flag indicating if upkeep is needed.\\r\\n\\t * @return execPayload Encoded data on what action to perform during upkeep.\\r\\n\\t */\\r\\n\\tfunction checker()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (bool canExec, bytes memory execPayload)\\r\\n\\t{\\r\\n\\t\\tbool updateNeeded = false;\\r\\n\\t\\tbytes memory updateData;\\r\\n\\t\\tfor (uint256 i = 0; i < activeStrategies.length; i++) {\\r\\n\\t\\t\\t(\\r\\n\\t\\t\\t\\tbool buy,\\r\\n\\t\\t\\t\\tbool sell,\\r\\n\\t\\t\\t\\tbool update,\\r\\n\\t\\t\\t\\tuint256 newThreshold\\r\\n\\t\\t\\t) = ITrailMix(activeStrategies[i]).checkUpkeepNeeded();\\r\\n\\r\\n\\t\\t\\tif (sell) {\\r\\n\\t\\t\\t\\t// Prioritize swap action if needed\\r\\n\\t\\t\\t\\treturn (\\r\\n\\t\\t\\t\\t\\ttrue,\\r\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(\\r\\n\\t\\t\\t\\t\\t\\tthis.performUpkeep.selector,\\r\\n\\t\\t\\t\\t\\t\\tactiveStrategies[i],\\r\\n\\t\\t\\t\\t\\t\\tbuy,\\r\\n\\t\\t\\t\\t\\t\\tsell,\\r\\n\\t\\t\\t\\t\\t\\tupdate,\\r\\n\\t\\t\\t\\t\\t\\tnewThreshold\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t} else if (buy) {\\r\\n\\t\\t\\t\\t// Prioritize swap action if needed\\r\\n\\t\\t\\t\\treturn (\\r\\n\\t\\t\\t\\t\\ttrue,\\r\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(\\r\\n\\t\\t\\t\\t\\t\\tthis.performUpkeep.selector,\\r\\n\\t\\t\\t\\t\\t\\tactiveStrategies[i],\\r\\n\\t\\t\\t\\t\\t\\tbuy,\\r\\n\\t\\t\\t\\t\\t\\tsell,\\r\\n\\t\\t\\t\\t\\t\\tupdate,\\r\\n\\t\\t\\t\\t\\t\\tnewThreshold\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t} else if (update) {\\r\\n\\t\\t\\t\\t// If no swap needed, check for threshold update\\r\\n\\t\\t\\t\\t// Note: This approach only encodes action for the first strategy needing an action.\\r\\n\\t\\t\\t\\tif (!updateNeeded) {\\r\\n\\t\\t\\t\\t\\tupdateNeeded = true;\\r\\n\\t\\t\\t\\t\\tupdateData = abi.encodeWithSelector(\\r\\n\\t\\t\\t\\t\\t\\tthis.performUpkeep.selector,\\r\\n\\t\\t\\t\\t\\t\\tactiveStrategies[i],\\r\\n\\t\\t\\t\\t\\t\\tbuy,\\r\\n\\t\\t\\t\\t\\t\\tsell,\\r\\n\\t\\t\\t\\t\\t\\tupdate,\\r\\n\\t\\t\\t\\t\\t\\tnewThreshold\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (updateNeeded) {\\r\\n\\t\\t\\treturn (true, updateData);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn (false, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Performs the upkeep of updating the stop loss threshold or triggering a sell.\\r\\n\\t * @dev Part of the gelato automation.\\r\\n\\t */\\r\\n\\tfunction performUpkeep(\\r\\n\\t\\taddress strategy,\\r\\n\\t\\tbool buy,\\r\\n\\t\\tbool sell,\\r\\n\\t\\tbool updateThreshold,\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\t_performUpkeep(strategy, buy, sell, updateThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _performUpkeep(\\r\\n\\t\\taddress strategy,\\r\\n\\t\\tbool buy,\\r\\n\\t\\tbool sell,\\r\\n\\t\\tbool updateThreshold,\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t) private {\\r\\n\\t\\t// Implement logic to perform TSL (e.g., swap to stablecoin) when conditions are met\\r\\n\\r\\n\\t\\tif (sell) {\\r\\n\\t\\t\\t//store balance before the sell occurs\\r\\n\\t\\t\\tuint256 s_erc20Balance = ITrailMix(strategy).getERC20Balance();\\r\\n\\r\\n\\t\\t\\t//call trigger function to sell on uniswap\\r\\n\\t\\t\\tITrailMix(strategy).executeTSL();\\r\\n\\r\\n\\t\\t\\t//emit swap event\\r\\n\\t\\t\\temit SwapExecuted(\\r\\n\\t\\t\\t\\tstrategy,\\r\\n\\t\\t\\t\\tITrailMix(strategy).getCreator(),\\r\\n\\t\\t\\t\\ts_erc20Balance,\\r\\n\\t\\t\\t\\tITrailMix(strategy).getStablecoinBalance(),\\r\\n\\t\\t\\t\\tITrailMix(strategy).getERC20TokenAddress(),\\r\\n\\t\\t\\t\\tITrailMix(strategy).getStablecoinAddress(),\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t} else if (buy) {\\r\\n\\t\\t\\tuint256 s_stablecoinBalance = ITrailMix(strategy)\\r\\n\\t\\t\\t\\t.getStablecoinBalance();\\r\\n\\r\\n\\t\\t\\tITrailMix(strategy).executeLimitBuy();\\r\\n\\r\\n\\t\\t\\t//emit swap event\\r\\n\\t\\t\\temit SwapExecuted(\\r\\n\\t\\t\\t\\tstrategy,\\r\\n\\t\\t\\t\\tITrailMix(strategy).getCreator(),\\r\\n\\t\\t\\t\\ts_stablecoinBalance,\\r\\n\\t\\t\\t\\tITrailMix(strategy).getERC20Balance(),\\r\\n\\t\\t\\t\\tITrailMix(strategy).getStablecoinAddress(),\\r\\n\\t\\t\\t\\tITrailMix(strategy).getERC20TokenAddress(),\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t} else if (updateThreshold) {\\r\\n\\t\\t\\tuint256 oldThreshold = ITrailMix(strategy).getTSLThreshold();\\r\\n\\r\\n\\t\\t\\t//call updateThreshold function to update the threshold\\r\\n\\t\\t\\tITrailMix(strategy).updateTSLThreshold(newThreshold);\\r\\n\\t\\t\\t//emit event for threshold update\\r\\n\\t\\t\\temit ThresholdUpdated(\\r\\n\\t\\t\\t\\tstrategy,\\r\\n\\t\\t\\t\\toldThreshold,\\r\\n\\t\\t\\t\\tnewThreshold,\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Function to get all contracts deployed by a user\\r\\n\\tfunction getUserContracts(\\r\\n\\t\\taddress user\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\treturn userContracts[user];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGelatoExecutor(address _executor) public {\\r\\n\\t\\t// Logic to set the Gelato executor address\\r\\n\\t\\trequire(msg.sender == managerDeployer, \\\"Not authorized\\\");\\r\\n\\t\\tgelatoExecutor = _executor;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x60b8b0276f0d98491b9e59bb22c785a681cec58240996071681206818e6034e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055600680546001600160a01b0319163317905561367e806100376000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063cf5303cf116200007a578063cf5303cf1462000162578063d2581503146200017c578063ede5123714620001b3578063f3d746f914620001ca578063f557f1a914620001e1578063f940e38514620001f857600080fd5b80630efe6a8b14620000bc57806334c925f014620000d5578063693bf4b71462000104578063b20b2429146200011b578063b789003d146200014b575b600080fd5b620000d3620000cd366004620019b3565b6200020f565b005b620000ec620000e6366004620019eb565b620007c8565b604051620000fb919062001a12565b60405180910390f35b620000d36200011536600462001a7d565b62000840565b620001326200012c36600462001b4d565b62000971565b6040516001600160a01b039091168152602001620000fb565b620001326200015c36600462001b67565b6200099c565b6200016c620009d5565b604051620000fb92919062001b96565b620001a26200018d366004620019eb565b60036020526000908152604090205460ff1681565b6040519015158152602001620000fb565b620000d3620001c436600462001bf0565b62000c50565b620000d3620001db366004620019eb565b62000cc2565b620000d3620001f2366004620019eb565b62000daa565b620000d36200020936600462001c5d565b62000e19565b336001600160a01b0316836001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027e919062001c9b565b6001600160a01b031614620002a65760405163bfcafd3760e01b815260040160405180910390fd5b6000836001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030d919062001c9b565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038216906323b872dd906064016020604051808303816000875af115801562000364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038a919062001cbb565b5060405163095ea7b360e01b81526001600160a01b0385811660048301526024820185905282169063095ea7b3906044016020604051808303816000875af1158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000401919062001cbb565b50604051631c57762b60e31b815260048101849052602481018390526001600160a01b0385169063e2bbb15890604401600060405180830381600087803b1580156200044c57600080fd5b505af115801562000461573d6000803e3d6000fd5b505050506001600160a01b03841660009081526003602052604090205460ff1662000631576001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0387169081179091556000908152600360205260409020805460ff1916821790558054620004f3919062001cf1565b60026000866001600160a01b03166001600160a01b0316815260200190815260200160002081905550836001600160a01b03167f0bd3cc1c5d7fe612c55d1f11d85563be2fbfe6b40cb0d0361e60b07b996fbeda856001600160a01b031663f9a19e546040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000586573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005ac919062001d0d565b866001600160a01b031663f9a19e546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000611919062001d0d565b604080519283526020830191909152429082015260600160405180910390a25b604051623a0ad760e51b81526001600160a01b03828116600483015285169033907f54578f45afaf673149e624fe60db713945facd7062fb5d9886b8afbf09ee81339083906307415ae090602401602060405180830381865afa1580156200069d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c3919062001d0d565b86886001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000729919062001c9b565b428a6001600160a01b031663c612a8086040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000769573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200078f919062001d0d565b6040805195865260208601949094526001600160a01b03929092168484015260608401526080830152519081900360a00190a350505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156200083457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000815575b50505050509050919050565b600030338c8c8c8c8c8c8c8c8c8c6040516200085c906200197a565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152968a1660608a0152948916608089015292881660a088015290871660c087015260e086015261010085015262ffffff1661012084015290921661014082015290151561016082015261018001604051809103906000f080158015620008e2573d6000803e3d6000fd5b5033600081815260046020908152604080832080546001810182559084529282902090920180546001600160a01b0319166001600160a01b0386811691821790925583518c815242938101939093529495508f169392917f27f210c3cfa1b3c49e3da52fd1c2be0f3ffd46ffa289b41a57477c87e54099c3910160405180910390a45050505050505050505050565b600181815481106200098257600080fd5b6000918252602090912001546001600160a01b0316905081565b60046020528160005260406000208181548110620009b957600080fd5b6000918252602090912001546001600160a01b03169150829050565b600060606000606060005b60015481101562000c21576000806000806001858154811062000a075762000a0762001d27565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663f0b946846040518163ffffffff1660e01b8152600401608060405180830381865afa15801562000a63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a89919062001d3d565b9350935093509350821562000b3b57600163ede5123760e01b6001878154811062000ab85762000ab862001d27565b6000918252602090912001546040516001600160a01b03909116602482015286151560448201528515156064820152841515608482015260a4810184905260c40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152909a909950975050505050505050565b831562000b6257600163ede5123760e01b6001878154811062000ab85762000ab862001d27565b811562000c07578662000c07576001965063ede5123760e01b6001868154811062000b915762000b9162001d27565b6000918252602090912001546040516001600160a01b03909116602482015285151560448201528415156064820152831515608482015260a4810183905260c40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915295505b50505050808062000c189062001d97565b915050620009e0565b50811562000c3457600194909350915050565b6000604051806020016040528060008152509350935050509091565b3330148062000c6957506005546001600160a01b031633145b62000cac5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b62000cbb858585858562001171565b5050505050565b336001600160a01b0316816001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d31919062001c9b565b6001600160a01b03161462000d595760405163bfcafd3760e01b815260040160405180910390fd5b806001600160a01b031663def74f916040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d9557600080fd5b505af115801562000cbb573d6000803e3d6000fd5b6006546001600160a01b0316331462000df75760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015260640162000ca3565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b62000e23620017c2565b336001600160a01b0316826001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e92919062001c9b565b6001600160a01b03161462000eba5760405163bfcafd3760e01b815260040160405180910390fd5b6000826001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000efb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f21919062001c9b565b6001600160a01b0316826001600160a01b03160362000fa757826001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f9f919062001d0d565b90506200100f565b826001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fe6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200100c919062001d0d565b90505b6040516351cff8d960e01b81526001600160a01b0383811660048301528416906351cff8d990602401600060405180830381600087803b1580156200105357600080fd5b505af115801562001068573d6000803e3d6000fd5b505050506001600160a01b03831660009081526003602052604090205460ff1615620010995762001099836200181d565b826001600160a01b0316336001600160a01b03167fcd2299771f9c7bc8a19e7a6b8237b9c07135d5d80ebd5dcd88d60f7212b6537a838542886001600160a01b031663c612a8086040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001136919062001d0d565b604080519485526001600160a01b03909316602085015291830152606082015260800160405180910390a3506200116d6001600055565b5050565b82156200143a576000856001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011df919062001d0d565b9050856001600160a01b031663d538df496040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200121d57600080fd5b505af115801562001232573d6000803e3d6000fd5b50505050856001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200129b919062001c9b565b6001600160a01b0316866001600160a01b03167ffe45b5432fda489a54f62aee430bcf72a5639b3174a0528dc94572338079642683896001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200130f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001335919062001d0d565b8a6001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200139a919062001c9b565b8b6001600160a01b0316637bef4f546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620013d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013ff919062001c9b565b6040805194855260208501939093526001600160a01b0391821684840152166060830152426080830152519081900360a00190a35062000cbb565b8315620016a2576000856001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001482573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014a8919062001d0d565b9050856001600160a01b03166391b517606040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620014e657600080fd5b505af1158015620014fb573d6000803e3d6000fd5b50505050856001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200153e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001564919062001c9b565b6001600160a01b0316866001600160a01b03167ffe45b5432fda489a54f62aee430bcf72a5639b3174a0528dc94572338079642683896001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa158015620015d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015fe919062001d0d565b8a6001600160a01b0316637bef4f546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200163d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001663919062001c9b565b8b6001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620013d9573d6000803e3d6000fd5b811562000cbb576000856001600160a01b031663f9a19e546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620016ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001710919062001d0d565b604051632539276f60e21b8152600481018490529091506001600160a01b038716906394e49dbc90602401600060405180830381600087803b1580156200175657600080fd5b505af11580156200176b573d6000803e3d6000fd5b50506040805184815260208101869052428183015290516001600160a01b038a1693507f0bd3cc1c5d7fe612c55d1f11d85563be2fbfe6b40cb0d0361e60b07b996fbeda92509081900360600190a2505050505050565b600260005403620018165760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000ca3565b6002600055565b6001600160a01b038116620018675760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640162000ca3565b6001600160a01b0381166000908152600360209081526040808320805460ff19169055600290915281205460018054919291620018a690829062001cf1565b81548110620018b957620018b962001d27565b600091825260209091200154600180546001600160a01b039092169250829184908110620018eb57620018eb62001d27565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600290915260409020829055600180548062001938576200193862001db3565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600290935250506040812055565b61187f8062001dca83390190565b6001600160a01b03811681146200199e57600080fd5b50565b8035620019ae8162001988565b919050565b600080600060608486031215620019c957600080fd5b8335620019d68162001988565b95602085013595506040909401359392505050565b600060208284031215620019fe57600080fd5b813562001a0b8162001988565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562001a555783516001600160a01b03168352928401929184019160010162001a2e565b50909695505050505050565b80151581146200199e57600080fd5b8035620019ae8162001a61565b6000806000806000806000806000806101408b8d03121562001a9e57600080fd5b8a3562001aab8162001988565b995060208b013562001abd8162001988565b985060408b013562001acf8162001988565b975060608b013562001ae18162001988565b965060808b013562001af38162001988565b955060a08b0135945060c08b0135935060e08b013562ffffff8116811462001b1a57600080fd5b925062001b2b6101008c01620019a1565b915062001b3c6101208c0162001a70565b90509295989b9194979a5092959850565b60006020828403121562001b6057600080fd5b5035919050565b6000806040838503121562001b7b57600080fd5b823562001b888162001988565b946020939093013593505050565b821515815260006020604081840152835180604085015260005b8181101562001bce5785810183015185820160600152820162001bb0565b506000606082860101526060601f19601f830116850101925050509392505050565b600080600080600060a0868803121562001c0957600080fd5b853562001c168162001988565b9450602086013562001c288162001a61565b9350604086013562001c3a8162001a61565b9250606086013562001c4c8162001a61565b949793965091946080013592915050565b6000806040838503121562001c7157600080fd5b823562001c7e8162001988565b9150602083013562001c908162001988565b809150509250929050565b60006020828403121562001cae57600080fd5b815162001a0b8162001988565b60006020828403121562001cce57600080fd5b815162001a0b8162001a61565b634e487b7160e01b600052601160045260246000fd5b8181038181111562001d075762001d0762001cdb565b92915050565b60006020828403121562001d2057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000806000806080858703121562001d5457600080fd5b845162001d618162001a61565b602086015190945062001d748162001a61565b604086015190935062001d878162001a61565b6060959095015193969295505050565b60006001820162001dac5762001dac62001cdb565b5060010190565b634e487b7160e01b600052603160045260246000fdfe6101006040523480156200001257600080fd5b506040516200187f3803806200187f833981016040819052620000359162000240565b600160008181556001600160a01b038e81166080528d811660a05282546001600160a01b03199081168e83161784556002805482168e84161790556003805482168d8416179055600480549091168a8316179055891660c05260e087905260098054600888905563ffffffff191661010062ffffff8816021783179055600e80549192909160ff191690830217905550886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012a91906200032c565b600b60006101000a81548160ff021916908360ff160217905550896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000183573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a991906200032c565b600b8054921515600160b01b0260ff60b01b196001600160a01b03909516620100000262010000600160b01b031960ff949094166101000293909316610100600160b01b0319909416939093179190911792909216179055506200035898505050505050505050565b80516001600160a01b03811681146200022a57600080fd5b919050565b805180151581146200022a57600080fd5b6000806000806000806000806000806000806101808d8f0312156200026457600080fd5b6200026f8d62000212565b9b506200027f60208e0162000212565b9a506200028f60408e0162000212565b99506200029f60608e0162000212565b9850620002af60808e0162000212565b9750620002bf60a08e0162000212565b9650620002cf60c08e0162000212565b955060e08d015194506101008d015193506101208d015162ffffff81168114620002f857600080fd5b9250620003096101408e0162000212565b91506200031a6101608e016200022f565b90509295989b509295989b509295989b565b6000602082840312156200033f57600080fd5b815160ff811681146200035157600080fd5b9392505050565b60805160a05160c05160e0516114a7620003d86000396000818161029b015281816106df01528181610ad701528181610c750152610d040152600081816101d70152818161025d015281816103850152610b8001526000818161018501528181610585015261060a0152600081816102d2015261091b01526114a76000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806398d07356116100c3578063d538df491161007c578063d538df49146102f6578063def74f91146102fe578063e2bbb15814610306578063eee2bfa014610319578063f0b9468414610321578063f9a19e541461035157600080fd5b806398d0735614610281578063a0a8045e14610289578063c3736fe614610291578063c612a80814610299578063d39ac0cb146102bf578063d5009584146102d057600080fd5b8063624aa0fd11610115578063624aa0fd1461021657806368e6ea75146102275780637bef4f541461022f57806391b517601461024057806394e49dbc14610248578063983733f01461025b57600080fd5b806307415ae01461015d5780630ee2cb10146101835780631865c57d146101bd5780631966b608146101d25780634096c91c146101f957806351cff8d914610201575b600080fd5b61017061016b3660046110f5565b610359565b6040519081526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161017a565b6101c5610402565b60405161017a9190611142565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b600854610170565b61021461020f3660046110f5565b610533565b005b6001546001600160a01b03166101a5565b600754610170565b6002546001600160a01b03166101a5565b610214610648565b610214610256366004611175565b600555565b7f00000000000000000000000000000000000000000000000000000000000000006101a5565b600a54610170565b610170610730565b600654610170565b7f0000000000000000000000000000000000000000000000000000000000000000610170565b6003546001600160a01b03166101a5565b7f00000000000000000000000000000000000000000000000000000000000000006101a5565b610214610852565b610214610910565b61021461031436600461118e565b6109a6565b610170610b4f565b610329610c3c565b604080519415158552921515602085015290151591830191909152606082015260800161017a565b600554610170565b600480546040516317f271b760e31b815260009283926001600160a01b03169163bf938db8916103ba917f0000000000000000000000000000000000000000000000000000000000000000918891670de0b6b3a764000091600191016111b0565b602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb91906111f0565b9392505050565b60606000600e5460ff16600381111561041d5761041d611209565b0361044a575060408051808201909152600d81526c155b9a5b9a5d1a585b1a5e9959609a1b602082015290565b6002600e5460ff16600381111561046357610463611209565b0361048b57506040805180820190915260088152674c696d697442757960c01b602082015290565b6001600e5460ff1660038111156104a4576104a4611209565b036104d0575060408051808201909152600c81526b0547261696c696e6753746f760a41b602082015290565b6003600e5460ff1660038111156104e9576104e9611209565b036105115750604080518082019091526008815267496e61637469766560c01b602082015290565b506040805180820190915260078152662ab735b737bbb760c91b602082015290565b6002546000906001600160a01b03908116908316036105bb57506007548061056e5760405163162908e360e11b815260040160405180910390fd5b60006007556002546105aa906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610dc2565b5050600e805460ff19166003179055565b6001546001600160a01b039081169083160361062f5750600654806105f35760405163162908e360e11b815260040160405180910390fd5b60006006556001546105aa906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610dc2565b60405163c1ab6dc160e01b815260040160405180910390fd5b6002600e5460ff16600381111561066157610661611209565b146106ab5760405162461bcd60e51b81526020600482015260156024820152744e6f7420696e204c696d697442757920737461746560581b60448201526064015b60405180910390fd5b6002546001546007546106cb926001600160a01b03908116921690610ec2565b5060006106d6610b4f565b905060646107047f000000000000000000000000000000000000000000000000000000000000000082611235565b61070e908361124e565b6107189190611265565b600555506000600c55600e805460ff19166001179055565b600080600b60029054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa91906112a1565b5050509150506000600b60029054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082991906112f1565b9050610836816012611314565b61084190600a611411565b61084b908361124e565b9250505090565b6001600e5460ff16600381111561086b5761086b611209565b146108b85760405162461bcd60e51b815260206004820152601960248201527f4e6f7420696e20547261696c696e6753746f702073746174650000000000000060448201526064016106a2565b6001546002546006546108d8926001600160a01b03908116921690610ec2565b506001546108ee906001600160a01b0316610359565b600c556108fe4262015180611420565b600d55600e805460ff19166002179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109925760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792063616c6c61626c65206279206d616e6167657220636f6e747261636044820152601d60fa1b60648201526084016106a2565b6009805460ff19811660ff90911615179055565b600082116109c75760405163162908e360e11b815260040160405180910390fd5b6003600e5460ff1660038111156109e0576109e0611209565b036109fe57604051631b92e95360e31b815260040160405180910390fd5b6001546040516323b872dd60e01b8152336004820152306024820152604481018490526000916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190611433565b905080610a9a576040516312171d8360e31b815260040160405180910390fd5b8260066000828254610aac9190611420565b9091555060009050600e5460ff166003811115610acb57610acb611209565b03610b21576064610afc7f000000000000000000000000000000000000000000000000000000000000000082611235565b610b06908461124e565b610b109190611265565b600555600e805460ff191660011790555b82610b2a610b4f565b610b34919061124e565b600a6000828254610b459190611420565b9091555050505050565b600480546001546040516317f271b760e31b815260009384936001600160a01b039081169363bf938db893610bb8937f00000000000000000000000000000000000000000000000000000000000000009390921691670de0b6b3a76400009161012c91016111b0565b602060405180830381865afa158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf991906111f0565b600b54909150600160b01b900460ff1615610c37576000610c18610730565b9050670de0b6b3a7640000610c2d828461124e565b61084b9190611265565b919050565b60008080806001600e5460ff166003811115610c5a57610c5a611209565b03610d55576000610c69610b4f565b90506000808080610c9b7f00000000000000000000000000000000000000000000000000000000000000006064611235565b600554610ca990606461124e565b610cb39190611265565b9050600060646008546064610cc89190611420565b610cd2908461124e565b610cdc9190611265565b9050600554861015610cf15760019450610d40565b80861115610d4057600193506064610d297f000000000000000000000000000000000000000000000000000000000000000082611235565b610d33908861124e565b610d3d9190611265565b92505b50600098509296509094509250610dbc915050565b6002600e5460ff166003811115610d6e57610d6e611209565b03610daf576000610d7d610b4f565b90506000600c5482108015610d935750600d5442115b15610d9c575060015b945060009350839250829150610dbc9050565b5060009250829150819050805b90919293565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610e1e9190611455565b6000604051808303816000865af19150503d8060008114610e5b576040519150601f19603f3d011682016040523d82523d6000602084013e610e60565b606091505b5091509150818015610e8a575080511580610e8a575080806020019051810190610e8a9190611433565b610ebb5760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016106a2565b5050505050565b600080610ece85610359565b60095490915060009062ffffff6101008204169060ff1615610f265769152d02c7e14af6800000610f01826101f4611420565b610f0b858861124e565b610f15919061124e565b610f1f9190611265565b9150610f2b565b600091505b60035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529088169063095ea7b3906044016020604051808303816000875af1158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190611433565b506040805160e0810182526001600160a01b03898116825288811660208301908152600954610100900462ffffff9081168486019081523060608601908152608086018c815260a087018a8152600060c089018181526003549a516304e45aaf60e01b81528a518a166004820152975189166024890152945190951660448701529151861660648601525160848501525160a484015251831660c48301529293909116906304e45aaf9060e4016020604051808303816000875af115801561106e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109291906111f0565b6002549091506001600160a01b03908116908a16036110cc5780600660008282546110bd9190611420565b909155505060006007556110e9565b80600760008282546110de9190611420565b909155505060006006555b98975050505050505050565b60006020828403121561110757600080fd5b81356001600160a01b03811681146103fb57600080fd5b60005b83811015611139578181015183820152602001611121565b50506000910152565b602081526000825180602084015261116181604085016020870161111e565b601f01601f19169190910160400192915050565b60006020828403121561118757600080fd5b5035919050565b600080604083850312156111a157600080fd5b50508035926020909101359150565b6001600160a01b0394851681529290931660208301526fffffffffffffffffffffffffffffffff16604082015263ffffffff909116606082015260800190565b60006020828403121561120257600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156112485761124861121f565b92915050565b80820281158282048414176112485761124861121f565b60008261128257634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114610c3757600080fd5b600080600080600060a086880312156112b957600080fd5b6112c286611287565b94506020860151935060408601519250606086015191506112e560808701611287565b90509295509295909350565b60006020828403121561130357600080fd5b815160ff811681146103fb57600080fd5b60ff82811682821603908111156112485761124861121f565b600181815b8085111561136857816000190482111561134e5761134e61121f565b8085161561135b57918102915b93841c9390800290611332565b509250929050565b60008261137f57506001611248565b8161138c57506000611248565b81600181146113a257600281146113ac576113c8565b6001915050611248565b60ff8411156113bd576113bd61121f565b50506001821b611248565b5060208310610133831016604e8410600b84101617156113eb575081810a611248565b6113f5838361132d565b80600019048211156114095761140961121f565b029392505050565b60006103fb60ff841683611370565b808201808211156112485761124861121f565b60006020828403121561144557600080fd5b815180151581146103fb57600080fd5b6000825161146781846020870161111e565b919091019291505056fea26469706673582212205cabbafb1749ae103f925ddf5f490a4a929ddc6e7a98b842847abd1c0cccfa8b64736f6c63430008140033a26469706673582212205c3537341185733f9a78dfa679ec506c99e3c7e9ecf742c9bfd077b7141db59b64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checker()": {
        "details": "Part of the Gelato automation",
        "returns": {
          "canExec": "Boolean flag indicating if upkeep is needed.",
          "execPayload": "Encoded data on what action to perform during upkeep."
        }
      },
      "performUpkeep(address,bool,bool,bool,uint256)": {
        "details": "Part of the gelato automation."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checker()": {
        "notice": "Checks if upkeep is needed based on TSL conditions.COMPUTED OFF-CHAIN"
      },
      "performUpkeep(address,bool,bool,bool,uint256)": {
        "notice": "Performs the upkeep of updating the stop loss threshold or triggering a sell."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2165,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "activeStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2169,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "strategyIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2173,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "isActiveStrategy",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2178,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "userContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2180,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "gelatoExecutor",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2182,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "managerDeployer",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}